{"version":3,"sources":["components/Player/Player.js","components/Computer/Computer.js","components/GameBoard/GameBoard.js","components/EndScreen/EndScreen.js","components/Header/Header.js","components/Footer/Footer.js","utils/ship_factory/ship_factory.js","utils/player_board_factory/player_board_factory.js","utils/computer_board_factory/computer_board_factory.js","App.js","index.js"],"names":["classMapping","tile","includes","Player","playerBoard","addPlayerShip","showShipPreview","hideShipPreview","hasGameStarted","className","count","board","map","id","onClick","e","target","onMouseEnter","onMouseOut","uniqid","appendingTiles","Computer","computerBoard","handlePlayerAttack","onMouseOver","style","backgroundColor","onMouseLeave","GameBoard","DefeatScreen","prop","WinScreen","EndScreen","whoLost","resetGame","Header","triggerGameStart","switchShipAxis","removeLastShip","randomlyAddPlayerShips","verticalAxis","Footer","href","shipFactory","shipName","axis","index","length","obj","hits","isSunk","addHit","playerBoardFactory","lengthMapping","changeShipDirection","verticalShip","appendShip","shipsOnBoard","shipAxis","tileStart","shipLength","i","updateBoard","Object","keys","checkAvailableSpaces","availableSpaces","j","push","strNum","pickRandomCoordinate","num","Math","floor","random","addIndividualShip","randomIndex","addShipToBoard","computerRandomAttack","recieveAttack","attackedPositions","imposiblePositions","checkImposiblePositions","console","log","newCoordinate","computerSentientAttack","posiblePositions","lastHitIndex","shipToDestroy","firstHit","lastHit","undefined","checkPositionsBeforeAttack","coordinate","tileAttacked","slice","startIndex","indexOf","find","setShipAsDestroyed","randomlyAddShips","removeShipFromBoard","checkingForDefeat","returnCount","sunkShipsCount","entries","computerAttack","computerBoardFactory","forEach","shipNameMap","0","1","2","3","4","shipLengthMap","App","useState","setPlayerBoard","setComputerBoard","turn","setTurn","setHasGameStarted","setVerticalAxis","setWhoLost","shipCount","setShipCount","setAvailableSpaces","useEffect","setTimeout","sortComputerShips","didPlayerLose","didComputerLose","handleComputerAttack","newSpaces","switchTurn","isPositionViable","boardCopy","shipToRemove","prevValue","Destroyer","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"oOAGMA,EAAe,SAACC,GACpB,OAAIA,EAAKC,SAAS,OACT,iBACLD,EAAKC,SAAS,aACT,uBACLD,EAAKC,SAAS,QACT,YACLD,EAAKC,SAAS,QACT,kBACI,KAATD,GAAgBA,EAAKC,SAAS,QAE3B,OADE,aAIEC,EAAS,SAAC,GACkC,IADjCC,EACgC,EADhCA,YAAaC,EACmB,EADnBA,cACnCC,EAAsD,EAAtDA,gBAAiBC,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,eAelC,OACE,0BACEC,UAAU,eADZ,UAEE,6BAAKD,EAAiB,MAAQ,wCAC9B,yBAASC,UAAWD,EAAiB,aAAe,qBAApD,SAlBmB,WACrB,IAAIE,GAAS,EAEb,OADkBN,EAAVO,MACKC,KAAI,SAAAX,GAAI,OACnB,qBACEQ,UAAWT,EAAaC,GACxBY,GAAIH,GAAO,EACXI,QAAS,SAAAC,GAAC,OAAIV,GAAeU,EAAEC,OAAOH,KACtCI,aAAcX,EACdY,WAAYX,GACPY,UASJC,SCnCHpB,EAAe,SAAAC,GACnB,OAAIA,EAAKC,SAAS,OACT,iBACLD,EAAKC,SAAS,aACT,uBACLD,EAAKC,SAAS,QACT,YACLD,EAAKC,SAAS,QACT,kBACF,QAGImB,EAAW,SAAC,GAAyD,IAAxDC,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,mBAAoBf,EAAoB,EAApBA,eAc3D,OACE,0BAASC,UAAYD,EAAoC,uBAAnB,iBAAtC,UACE,0CACA,yBAASC,UAAU,qBAAnB,SAhBmB,WACrB,IAAIC,GAAS,EACb,OAAOY,EAAcX,MAAMC,KAAI,SAAAX,GAAI,OACjC,qBACEQ,UAAWT,EAAaC,GACxBY,GAAIH,GAAO,EACXI,QAAS,SAAAC,GAAC,OAAIQ,GAAoBR,EAAEC,OAAOH,KAC3CW,YAAa,SAAAT,GAAC,OAAIA,EAAEC,OAAOS,MAAMC,gBAAkB,WACnDC,aAAc,SAAAZ,GAAC,OAAIA,EAAEC,OAAOS,MAAMC,gBAAkB,KAC/CP,UAQJC,SC7BIQ,EAAY,SAAC,GAEe,IAFdpB,EAEa,EAFbA,eAAgBH,EAEH,EAFGA,cACzCkB,EACsC,EADtCA,mBAAoBnB,EACkB,EADlBA,YAAakB,EACK,EADLA,cACjChB,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,gBACjB,OACE,0BAASE,UAAU,aAAnB,UACE,cAAC,EAAD,CACEL,YAAaA,EACbC,cAAeA,EACfC,gBAAiBA,EACjBC,gBAAiBA,EACjBC,eAAgBA,KACE,IAAnBA,EACG,GACA,cAAC,EAAD,CACAc,cAAeA,EACfC,mBAAoBA,EACpBf,eAAgBA,QClBpBqB,EAAe,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACrB,OACE,0BAASrB,UAAWqB,EAApB,UACE,2CACA,kEAKAC,EAAY,SAAC,GAAY,IAAXD,EAAU,EAAVA,KAClB,OACE,0BAASrB,UAAWqB,EAApB,UACE,0CACA,kEAKOE,EAAY,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UAClC,OACE,yBAASpB,QAASoB,EAAlB,SACe,aAAZD,EACG,cAAC,EAAD,CAAWH,KAAM,cACjB,cAAC,EAAD,CAAcA,KAAM,oBCvBjBK,EAAS,SAAC,GAEW,IAFVC,EAES,EAFTA,iBAAkBC,EAET,EAFSA,eAC1CC,EACiC,EADjCA,eAAgBC,EACiB,EADjBA,uBAAwBC,EACP,EADOA,aACtChC,EAA+B,EAA/BA,eAAgB0B,EAAe,EAAfA,UAChB,OACE,mCACE,wBAAQpB,QAASN,EAAiB0B,EAAYE,EAA9C,SACG5B,EAAiB,UAAY,eAE9BA,EAEE,GADA,yBAAQC,UAAU,kBAAkBK,QAASuB,EAA7C,mBAAoEG,EAAe,IAAM,OAE3FhC,EAEE,GADD,wBAAQC,UAAU,kBAAkBK,QAASwB,EAA7C,yBAED9B,EAEE,GADD,wBAAQM,QAASyB,EAAjB,8BCfIE,EAAS,WACpB,OACE,iCACE,yDACE,mBAAGC,KAAK,kCAAkC1B,OAAO,SAAjD,gCADF,yCCLO2B,EAAc,SAACC,EAAUC,EAAMC,GAC1C,IAOMC,EAPiB,CACrB,QAAW,EACX,WAAc,EACd,QAAW,EACX,UAAa,EACb,UAAa,GAEeH,GAUxBI,EAAM,CAAEJ,WAAUG,SAAQD,QAAOG,KAT5B,EASkCJ,OAAMK,QARtC,EAQ8CC,OAJ5C,WACbH,EAAIC,OAHAD,EAAIC,MAAQF,IAAQC,EAAIE,QAAS,KAOvC,OAAOF,GCjBII,EAAqB,WAChC,IAaMC,EAAgB,CACpB,QAAW,EACX,WAAc,EACd,QAAW,EACX,UAAa,EACb,UAAa,GAITC,EAAsB,kBAC1BN,EAAIO,cAAgBP,EAAIO,cAIpBC,EAAa,SAACZ,GAAc,IAE9BjC,EACEqC,EADFrC,MAAO8C,EACLT,EADKS,aAEHC,EACJD,EAAab,GAAUC,KACnBc,EACJF,EAAab,GAAUE,MACnBc,EACJP,EAAcT,GAEZlC,EAAQ,EACZ,GAAiB,MAAbgD,EAAkB,CAChBC,EAAY,IAAM,IACpBhD,EAAMgD,EAAU,GAAK,OACW,KAA5BhD,EAAOgD,EAAU,EAAG,MACtBhD,EAAOgD,EAAU,EAAG,IAAM,QACI,KAA5BhD,EAAOgD,EAAU,EAAG,MACtBhD,EAAOgD,EAAU,EAAG,IAAM,UAEzBA,EAAYC,GAAc,IAAM,IACnCjD,EAAMgD,EAAYC,GAAc,OACW,KAAvCjD,EAAOgD,EAAYC,EAAY,MACjCjD,EAAOgD,EAAYC,EAAY,IAAM,QACI,KAAvCjD,EAAOgD,EAAYC,EAAY,MACjCjD,EAAOgD,EAAYC,EAAY,IAAM,SAEzC,IAAK,IAAIC,EAAIF,EAAWE,EAAIF,EAAYC,EAAYC,IAClDlD,EAAMkD,GAAN,UAAcjB,GAAd,OAAyBlC,GACrBmD,EAAE,GAAK,MACTlD,EAAMkD,EAAE,IAAM,QACZA,EAAE,IAAM,IACVlD,EAAMkD,EAAE,IAAM,QAChBnD,QAEG,CACDiD,GAAa,KACfhD,EAAMgD,EAAU,IAAM,OACO,IAAzBhD,EAAMgD,EAAU,GAAG,KAAaA,EAAU,GAAK,IAAM,IACvDhD,EAAMgD,EAAU,GAAG,GAAK,QACG,IAAzBhD,EAAMgD,EAAU,GAAG,IAAYA,EAAY,IAAM,IACnDhD,EAAMgD,EAAU,GAAG,GAAK,SAEvBA,EAAa,GAAKC,EAAe,MACpCjD,EAAMgD,EAAW,GAAKC,GAAe,OACO,IAAxCjD,EAAOgD,EAAW,GAAGC,EAAa,KAAaD,EAAU,GAAK,IAAM,IACtEhD,EAAOgD,EAAW,GAAGC,EAAa,GAAK,QACG,IAAxCjD,EAAOgD,EAAW,GAAGC,EAAa,IAAYD,EAAY,IAAM,IAClEhD,EAAOgD,EAAW,GAAGC,EAAa,GAAK,SAE3C,IAAK,IAAIC,EAAIF,EAAWE,EAAIF,EAAa,GAAKF,EAAab,GAAUG,OAASc,GAAG,GAC/ElD,EAAMkD,GAAN,UAAcjB,GAAd,OAAyBlC,GACrBmD,EAAI,IAAM,IACZlD,EAAMkD,EAAE,GAAK,SACVA,EAAE,GAAK,IAAM,IAChBlD,EAAMkD,EAAE,GAAK,QACfnD,MAKAoD,EAAc,WAIlB,IAJyB,IAEvBL,EACET,EADFS,aAAc9C,EACZqC,EADYrC,MAEPkD,EAAI,EAAGA,EAAIlD,EAAMoC,OAAQc,IAChClD,EAAMkD,GAAK,GACb,cAAqBE,OAAOC,KAAKP,GAAjC,gBAAK,IAAIb,EAAQ,KACfY,EAAWZ,KAqBTqB,EAAuB,SAACrB,GAAc,IAExCjC,EACEqC,EADFrC,MAAO4C,EACLP,EADKO,aAEHK,EAAaP,EAAcT,GAC7BsB,EAAkB,GACtB,GAAIX,GACF,IAAK,IAAIM,EAAI,EAAGA,EAAIlD,EAAMoC,OAAQc,IAChC,KAAIA,EAAgB,GAAXD,EAAiB,MAET,KAAbjD,EAAMkD,GAAW,CAEnB,IADA,IAAInD,EAAQ,EACHyD,EAAIN,EAAE,GAAIM,EAAoB,GAAdP,EAAkBC,GACxB,KAAblD,EAAMwD,GADkCA,GAAG,GAE7CzD,IAGAA,IAAUkD,GACZM,EAAgBE,KAAKP,SAI3B,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAMQ,EAAM,UAAMR,GAClB,GAAiB,KAAblD,EAAMkD,KAAcQ,EAAO,GAAK,GAAGT,GAAcS,EAAS,GAAGT,GAAa,CAE5E,IADA,IAAIlD,EAAQ,EACHyD,EAAIN,EAAE,EAAGM,EAAKP,EAAYC,GAChB,KAAblD,EAAMwD,GAD0BA,IAElCzD,IAIAA,IAAUkD,GACZM,EAAgBE,KAAKP,IAI7B,OAAOK,GAQHI,EAAuB,eAACC,EAAD,uDAAO,IAAP,OAC3BC,KAAKC,MAAMD,KAAKE,SAAWH,IAEvBI,EAAoB,SAAC/B,GAPzB4B,KAAKE,SAAW,IACZpB,IAQJ,IAAIY,EAAkBD,EAAqBrB,GACZ,IAA3BsB,EAAgBnB,SAClBC,EAAIM,sBACJY,EAAkBD,EAAqBrB,IAEzC,IAAMgC,EAAcN,EAAqBJ,EAAgBnB,QACzDC,EAAI6B,eAAeX,EAAgBU,GAAchC,IAsL7CkC,EAAuB,WAAO,IAEhCC,EACE/B,EADF+B,cAAeC,EACbhC,EADagC,kBAEXC,EAzBwB,WAG9B,IAHqC,IAC7BD,EAAsBhC,EAAtBgC,kBACFC,EAAqB,GAClBpB,EAAI,EAAGA,EAAI,IAAKA,IACvB,IAAImB,EAAkB9E,SAAS2D,GAA/B,CAEA,IAAInD,EAAQ,GACRmD,EAAI,KAAO,GAAKmB,EAAkB9E,SAAS2D,EAAE,KAC/CnD,MACGmD,EAAE,GAAK,KAAO,GAAKmB,EAAkB9E,SAAS2D,EAAE,KACnDnD,KACEmD,EAAE,GAAK,GAAKmB,EAAkB9E,SAAS2D,EAAE,MAC3CnD,KACEmD,EAAE,GAAK,KAAOmB,EAAkB9E,SAAS2D,EAAE,MAC7CnD,IACEA,GAAS,GACXuE,EAAmBb,KAAKP,GAE5B,OAAOoB,EAOoBC,GAC3BC,QAAQC,IAAIH,GAGZ,IAFA,IAAII,EACFf,IACKU,EAAkB9E,SAASmF,IAAkBJ,EAAmB/E,SAASmF,IAC9EA,EAAiBf,IACnBS,EAAcM,IA+CVC,EAAyB,WAAO,IAC9BP,EAAoC/B,EAApC+B,cAAeQ,EAAqBvC,EAArBuC,kBA7CY,WAAO,IAClC5E,EAGFqC,EAHErC,MAAO6E,EAGTxC,EAHSwC,aACXC,EAEEzC,EAFFyC,cAAehC,EAEbT,EAFaS,aACfuB,EACEhC,EADFgC,kBAAmBO,EACjBvC,EADiBuC,iBAGrB,GAAI9B,EAAagC,GAAexC,KAAO,EAAvC,CAGE,IAFA,IAAIyC,EACAC,EACK9B,EAAI,OAAgB+B,IAAbF,EAAwB7B,IACjClD,EAAMkD,GAAG3D,SAASuF,IAAkB9E,EAAMkD,GAAG3D,SAAS,SACzDwF,EAAW7B,GACf,IAAK,IAAIA,EAAI,QAAgB+B,IAAZD,EAAuB9B,IAClClD,EAAMkD,GAAG3D,SAASuF,IAAkB9E,EAAMkD,GAAG3D,SAAS,SACxDyF,EAAU9B,GAC0B,KAApCJ,EAAagC,GAAe5C,MACzBmC,EAAkB9E,SAASwF,EAAS,IAAMA,EAAW,KAAO,GAC/DH,EAAiBnB,KAAKsB,EAAS,GAC5BV,EAAkB9E,SAASyF,EAAQ,KAAOA,EAAQ,GAAK,KAAO,GACjEJ,EAAiBnB,KAAKuB,EAAQ,MAG3BX,EAAkB9E,SAASwF,EAAS,KAAOA,EAAS,IAAM,GAC7DH,EAAiBnB,KAAKsB,EAAS,KAC5BV,EAAkB9E,SAASyF,EAAQ,KAAOA,EAAQ,GAAK,KAC1DJ,EAAiBnB,KAAKuB,EAAQ,UAKhCH,EAAa,GAAK,MACfR,EAAkB9E,SAASsF,EAAa,KAC3CD,EAAiBnB,KAAKoB,EAAa,KACnCA,EAAa,IAAM,IAChBR,EAAkB9E,SAASsF,EAAa,KAC3CD,EAAiBnB,KAAKoB,EAAa,MAClCA,EAAa,GAAK,KAAO,IACvBR,EAAkB9E,SAASsF,EAAa,IAC3CD,EAAiBnB,KAAKoB,EAAa,IACnCA,EAAe,KAAO,IACnBR,EAAkB9E,SAASsF,EAAa,IAC3CD,EAAiBnB,KAAKoB,EAAa,IAKvCK,GAEAd,EAAcQ,EADMf,KAAKC,MAAMD,KAAKE,SAAWa,EAAiBxC,WAY5DC,EAAM,CACVrC,MA3aU,CACV,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAkapC8C,aAnZmB,GAoZnBsB,cA3HoB,SAACe,GAAgB,IAEnCnF,EAEEqC,EAFFrC,MAAO8C,EAELT,EAFKS,aACPuB,EACEhC,EADFgC,kBAEIe,EAAepF,EAAMmF,GAC3B,GAAqB,KAAjBC,EACFpF,EAAMmF,GAAc,YACjB,GAAqB,SAAjBC,EACPpF,EAAMmF,IAAe,YAClB,CACH,IAAMlD,EAAWmD,EAAaC,MAAM,GAAI,GACxCvC,EAAab,GAAUO,SACvBxC,EAAMmF,IAAe,OACjBrC,EAAab,GAAUM,SA5HJ,SAACN,GAAc,IAEtCjC,EAEEqC,EAFFrC,MAAO8C,EAELT,EAFKS,aACPuB,EACEhC,EADFgC,kBAEIpB,EAAaP,EAAcT,GAC3BqD,EAAatF,EAAMuF,QACvBvF,EAAMwF,MAAK,SAAAlG,GAAI,OAAIA,EAAKC,SAAL,UAAiB0C,EAAjB,UAErB,GAAoC,MAAhCa,EAAab,GAAUC,KAAc,CACnCoD,EAAa,IAAM,IACrBtF,EAAMsF,EAAW,GAAK,YACjBjB,EAAkB9E,SAAS+F,EAAW,IACzCjB,EAAkBZ,KAAK6B,EAAW,GAChCA,EAAW,IAAM,IACnBtF,EAAMsF,EAAW,IAAM,YAClBjB,EAAkB9E,SAAS+F,EAAW,KACzCjB,EAAkBZ,KAAK6B,EAAW,KAEnCA,EAAW,EAAI,MAChBtF,EAAMsF,EAAW,GAAK,YACjBjB,EAAkB9E,SAAS+F,EAAW,IACzCjB,EAAkBZ,KAAK6B,EAAW,MAGnCA,EAAWrC,GAAc,IAAM,IAClCjD,EAAMsF,EAAWrC,GAAc,YAC1BoB,EAAkB9E,SAAS+F,EAAWrC,IACzCoB,EAAkBZ,KAAK6B,EAAWrC,GAChCqC,EAAWrC,EAAW,IAAM,IAC9BjD,EAAMsF,EAAWrC,EAAW,IAAM,YAC7BoB,EAAkB9E,SAAS+F,EAAWrC,EAAW,KACpDoB,EAAkBZ,KAAK6B,EAAWrC,EAAW,KAE7CqC,EAAWrC,EAAW,GAAK,MAC7BjD,EAAMsF,EAAWrC,EAAW,IAAM,YAC7BoB,EAAkB9E,SAAS+F,EAAWrC,EAAW,KACpDoB,EAAkBZ,KAAK6B,EAAWrC,EAAW,MAInD,IAAK,IAAIC,EAAIoC,EAAYpC,EAAIoC,EAAarC,EAAYC,IACpDlD,EAAMkD,GAAKlD,EAAMkD,GAAGmC,MAAM,GAAI,GAC9BrF,EAAMkD,IAAM,YACRA,EAAE,GAAK,MACTlD,EAAMkD,EAAE,IAAM,YACTmB,EAAkB9E,SAAS2D,EAAE,KAChCmB,EAAkBZ,KAAKP,EAAE,KAEzBA,EAAE,IAAM,IACVlD,EAAMkD,EAAE,IAAM,YACTmB,EAAkB9E,SAAS2D,EAAE,KAChCmB,EAAkBZ,KAAKP,EAAE,SAI5B,CACCoC,EAAW,IAAM,IACnBtF,EAAMsF,EAAW,IAAM,YAClBjB,EAAkB9E,SAAS+F,EAAW,KACzCjB,EAAkBZ,KAAK6B,EAAW,IAChCA,EAAa,IAAM,IACrBtF,EAAMsF,EAAW,IAAM,YAClBjB,EAAkB9E,SAAS+F,EAAW,KACzCjB,EAAkBZ,KAAK6B,EAAW,MAElCA,EAAW,GAAK,IAAM,IACxBtF,EAAMsF,EAAW,GAAK,YACjBjB,EAAkB9E,SAAS+F,EAAW,IACzCjB,EAAkBZ,KAAK6B,EAAW,KAGpCA,EAAuB,GAAXrC,EAAiB,MAC/BjD,EAAMsF,EAAuB,GAAXrC,GAAkB,YAC/BoB,EAAkB9E,SAAS+F,EAAuB,GAAXrC,IAC1CoB,EAAkBZ,KAAK6B,EAAuB,GAAXrC,GACjCqC,EAAa,IAAM,IACrBtF,EAAMsF,EAAuB,GAAXrC,EAAe,GAAK,YACjCoB,EAAkB9E,SAAS+F,EAAuB,GAAXrC,EAAe,IACzDoB,EAAkBZ,KAAK6B,EAAuB,GAAXrC,EAAe,KAEjDqC,EAAW,GAAK,IAAM,IACzBtF,EAAMsF,EAAuB,GAAXrC,EAAe,GAAK,YACjCoB,EAAkB9E,SAAS+F,EAAuB,GAAXrC,EAAe,IACzDoB,EAAkBZ,KAAK6B,EAAuB,GAAXrC,EAAe,KAIxD,IAAK,IAAIC,EAAIoC,EAAYpC,EAAIoC,EAAyB,GAAXrC,EAAgBC,GAAG,GAC5DlD,EAAMkD,GAAKlD,EAAMkD,GAAGmC,MAAM,GAAI,GAC9BrF,EAAMkD,IAAM,aACPA,EAAE,GAAK,IAAM,IAChBlD,EAAMkD,EAAE,GAAK,YACRmB,EAAkB9E,SAAS2D,EAAE,IAChCmB,EAAkBZ,KAAKP,EAAE,IAEzBA,EAAI,IAAM,IACZlD,EAAMkD,EAAE,GAAK,YACRmB,EAAkB9E,SAAS2D,EAAE,IAChCmB,EAAkBZ,KAAKP,EAAE,KA0B7BuC,CAAmBxD,GACnBI,EAAIyC,cAAgB,KAGpBzC,EAAIwC,aAAeM,EACnB9C,EAAIyC,cAAgB7C,GAGxBoC,EAAkBZ,KAAK0B,GACvB9C,EAAIuC,iBAAmB,IAoGvBV,eA5UqB,SAACiB,EAAYlD,GAAc,IAI1Cc,GACa,IAFfV,EADFO,aAIE,IACA,IAJAP,EADYS,aAMHb,GACXD,EAAYC,EAAUc,EAAUoC,GAClChC,KAmUAuC,iBA/PuB,WACvB1B,EAAkB,WAClBA,EAAkB,cAClBA,EAAkB,WAClBA,EAAkB,aAClBA,EAAkB,cA2PlB2B,oBAjU0B,SAAC1D,UACpBI,EAAIS,aAAab,GACxBkB,KAgUAG,uBACAsC,kBA1PwB,SAACC,GAEzB,IADA,IAAIC,EAAiB,EACrB,MAA0B1C,OAAO2C,QAAQ1D,EAAIS,cAA7C,oDACWP,QACPuD,IACJ,OAAIA,GAAkB,KAElBD,GACKC,GAmPTlD,cA9ZiB,EA+ZjBD,sBACA0B,kBAxIsB,GAyItBQ,aAxIEA,UAyIFD,iBAvIqB,GAwIrBE,cAzIkB,GA0IlBX,uBACA6B,eAxBqB,WAEC,KADE3D,EAAlByC,cAEJX,IAEAQ,MAqBJ,OAAOtC,GC7bI4D,EAAuB,WAClC,IAaMvD,EAAgB,CACpB,QAAW,EACX,WAAc,EACd,QAAW,EACX,UAAa,EACb,UAAa,GAITC,EAAsB,kBAC1BN,EAAIO,cAAgBP,EAAIO,cAIpBC,EAAa,SAACZ,GAAc,IAE9BjC,EACEqC,EADFrC,MAAO8C,EACLT,EADKS,aAEHC,EACJD,EAAab,GAAUC,KACnBc,EACJF,EAAab,GAAUE,MACnBc,EACJP,EAAcT,GAEZlC,EAAQ,EACZ,GAAiB,MAAbgD,EAAkB,CAChBC,EAAY,IAAM,IACpBhD,EAAMgD,EAAU,GAAK,OACW,KAA5BhD,EAAOgD,EAAU,EAAG,MACtBhD,EAAOgD,EAAU,EAAG,IAAM,QACI,KAA5BhD,EAAOgD,EAAU,EAAG,MACtBhD,EAAOgD,EAAU,EAAG,IAAM,UAEzBA,EAAYC,GAAc,IAAM,IACnCjD,EAAMgD,EAAYC,GAAc,OACW,KAAvCjD,EAAOgD,EAAYC,EAAY,MACjCjD,EAAOgD,EAAYC,EAAY,IAAM,QACI,KAAvCjD,EAAOgD,EAAYC,EAAY,MACjCjD,EAAOgD,EAAYC,EAAY,IAAM,SAEzC,IAAK,IAAIC,EAAIF,EAAWE,EAAIF,EAAYC,EAAYC,IAClDlD,EAAMkD,GAAN,UAAcjB,GAAd,OAAyBlC,GACrBmD,EAAE,GAAK,MACTlD,EAAMkD,EAAE,IAAM,QACZA,EAAE,IAAM,IACVlD,EAAMkD,EAAE,IAAM,QAChBnD,QAEG,CACDiD,GAAa,KACfhD,EAAMgD,EAAU,IAAM,OACO,IAAzBhD,EAAMgD,EAAU,GAAG,KAAaA,EAAU,GAAK,IAAM,IACvDhD,EAAMgD,EAAU,GAAG,GAAK,QACG,IAAzBhD,EAAMgD,EAAU,GAAG,IAAYA,EAAY,IAAM,IACnDhD,EAAMgD,EAAU,GAAG,GAAK,SAEvBA,EAAa,GAAKC,EAAe,MACpCjD,EAAMgD,EAAW,GAAKC,GAAe,OACO,IAAxCjD,EAAOgD,EAAW,GAAGC,EAAa,KAAaD,EAAU,GAAK,IAAM,IACtEhD,EAAOgD,EAAW,GAAGC,EAAa,GAAK,QACG,IAAxCjD,EAAOgD,EAAW,GAAGC,EAAa,IAAYD,EAAY,IAAM,IAClEhD,EAAOgD,EAAW,GAAGC,EAAa,GAAK,SAE3C,IAAK,IAAIC,EAAIF,EAAWE,EAAIF,EAAa,GAAKF,EAAab,GAAUG,OAASc,GAAG,GAC/ElD,EAAMkD,GAAN,UAAcjB,GAAd,OAAyBlC,GACrBmD,EAAI,IAAM,IACZlD,EAAMkD,EAAE,GAAK,SACVA,EAAE,GAAK,IAAM,IAChBlD,EAAMkD,EAAE,GAAK,QACfnD,MAqCAuD,EAAuB,SAACrB,GAC5B,IAAMgB,EAAaP,EAAcT,GAC7BsB,EAAkB,GACtB,GAAIlB,EAAIO,cACN,IAAK,IAAIM,EAAI,EAAGA,EAAIb,EAAIrC,MAAMoC,OAAQc,IACpC,KAAIA,EAAgB,GAAXD,EAAiB,MAEL,KAAjBZ,EAAIrC,MAAMkD,GAAW,CAEvB,IADA,IAAInD,EAAQ,EACHyD,EAAIN,EAAE,GAAIM,EAAoB,GAAdP,EAAkBC,GACpB,KAAjBb,EAAIrC,MAAMwD,GAD8BA,GAAG,GAE7CzD,IAGAA,IAAUkD,GACZM,EAAgBE,KAAKP,SAI3B,IAAK,IAAIA,EAAI,EAAGA,EAAIb,EAAIrC,MAAMoC,OAAQc,IAAK,CACzC,IAAMQ,EAAM,UAAMR,GAClB,GAAqB,KAAjBb,EAAIrC,MAAMkD,KAAcQ,EAAO,GAAK,GAAGT,GAAcS,EAAS,GAAGT,GAAa,CAEhF,IADA,IAAIlD,EAAQ,EACHyD,EAAIN,EAAE,EAAGM,EAAKP,EAAYC,GACZ,KAAjBb,EAAIrC,MAAMwD,GADsBA,IAElCzD,IAIAA,IAAUkD,GACZM,EAAgBE,KAAKP,IAI7B,OAAOK,GAWHS,EAAoB,SAAC/B,GAPzB4B,KAAKE,SAAW,IACZpB,IAQJ,IAAIY,EAAkBD,EAAqBrB,GACZ,IAA3BsB,EAAgBnB,SAClBC,EAAIM,sBACJY,EAAkBD,EAAqBrB,IAEzC,IAAMgC,EAVqB,eAACL,EAAD,uDAAO,IAAP,OAC3BC,KAAKC,MAAMD,KAAKE,SAAWH,GASPD,CAAqBJ,EAAgBnB,QACzDC,EAAI6B,eAAeX,EAAgBU,GAAchC,IA4I7CI,EAAM,CACVrC,MA1TU,CACV,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAiTpC8C,aAlSmB,GAmSnBsB,cAxBoB,SAACe,GAAgB,IAEnCnF,EAEEqC,EAFFrC,MAAO8C,EAELT,EAFKS,aACPuB,EACEhC,EADFgC,kBAEF,IAAIA,EAAkB9E,SAAS4F,GAA/B,CACA,IAAMC,EAAepF,EAAMmF,GAC3B,GAAqB,KAAjBC,EACFpF,EAAMmF,GAAc,YACjB,GAAqB,SAAjBC,EACPpF,EAAMmF,IAAe,YAClB,CACH,IAAMlD,EAAWmD,EAAaC,MAAM,GAAI,GACxCvC,EAAab,GAAUO,SACvBxC,EAAMmF,IAAe,OACjBrC,EAAab,GAAUM,QA1HJ,SAACN,GAAc,IAEtCjC,EAEEqC,EAFFrC,MAAO8C,EAELT,EAFKS,aACPuB,EACEhC,EADFgC,kBAEIpB,EAAaP,EAAcT,GAC3BqD,EAAatF,EAAMuF,QACvBvF,EAAMwF,MAAK,SAAAlG,GAAI,OAAIA,EAAKC,SAAL,UAAiB0C,EAAjB,UAErB,GAAoC,MAAhCa,EAAab,GAAUC,KAAc,CACnCoD,EAAa,IAAM,IACrBtF,EAAMsF,EAAW,GAAK,YACjBjB,EAAkB9E,SAAS+F,EAAW,IACzCjB,EAAkBZ,KAAK6B,EAAW,GAChCA,EAAW,IAAM,IACnBtF,EAAMsF,EAAW,IAAM,YAClBjB,EAAkB9E,SAAS+F,EAAW,KACzCjB,EAAkBZ,KAAK6B,EAAW,KAEnCA,EAAW,EAAI,MAChBtF,EAAMsF,EAAW,GAAK,YACjBjB,EAAkB9E,SAAS+F,EAAW,IACzCjB,EAAkBZ,KAAK6B,EAAW,MAGnCA,EAAWrC,GAAc,IAAM,IAClCjD,EAAMsF,EAAWrC,GAAc,YAC1BoB,EAAkB9E,SAAS+F,EAAWrC,IACzCoB,EAAkBZ,KAAK6B,EAAWrC,GAChCqC,EAAWrC,EAAW,IAAM,IAC9BjD,EAAMsF,EAAWrC,EAAW,IAAM,YAC7BoB,EAAkB9E,SAAS+F,EAAWrC,EAAW,KACpDoB,EAAkBZ,KAAK6B,EAAWrC,EAAW,KAE7CqC,EAAWrC,EAAW,GAAK,MAC7BjD,EAAMsF,EAAWrC,EAAW,IAAM,YAC7BoB,EAAkB9E,SAAS+F,EAAWrC,EAAW,KACpDoB,EAAkBZ,KAAK6B,EAAWrC,EAAW,MAInD,IAAK,IAAIC,EAAIoC,EAAYpC,EAAIoC,EAAarC,EAAYC,IACpDlD,EAAMkD,GAAKlD,EAAMkD,GAAGmC,MAAM,GAAI,GAC9BrF,EAAMkD,IAAM,YACRA,EAAE,GAAK,MACTlD,EAAMkD,EAAE,IAAM,YACTmB,EAAkB9E,SAAS2D,EAAE,KAChCmB,EAAkBZ,KAAKP,EAAE,KAEzBA,EAAE,IAAM,IACVlD,EAAMkD,EAAE,IAAM,YACTmB,EAAkB9E,SAAS2D,EAAE,KAChCmB,EAAkBZ,KAAKP,EAAE,SAI5B,CACCoC,EAAW,IAAM,IACnBtF,EAAMsF,EAAW,IAAM,YAClBjB,EAAkB9E,SAAS+F,EAAW,KACzCjB,EAAkBZ,KAAK6B,EAAW,IAChCA,EAAa,IAAM,IACrBtF,EAAMsF,EAAW,IAAM,YAClBjB,EAAkB9E,SAAS+F,EAAW,KACzCjB,EAAkBZ,KAAK6B,EAAW,MAElCA,EAAW,GAAK,IAAM,IACxBtF,EAAMsF,EAAW,GAAK,YACjBjB,EAAkB9E,SAAS+F,EAAW,IACzCjB,EAAkBZ,KAAK6B,EAAW,KAGpCA,EAAuB,GAAXrC,EAAiB,MAC/BjD,EAAMsF,EAAuB,GAAXrC,GAAkB,YAC/BoB,EAAkB9E,SAAS+F,EAAuB,GAAXrC,IAC1CoB,EAAkBZ,KAAK6B,EAAuB,GAAXrC,GACjCqC,EAAa,IAAM,IACrBtF,EAAMsF,EAAuB,GAAXrC,EAAe,GAAK,YACjCoB,EAAkB9E,SAAS+F,EAAuB,GAAXrC,EAAe,IACzDoB,EAAkBZ,KAAK6B,EAAuB,GAAXrC,EAAe,KAEjDqC,EAAW,GAAK,IAAM,IACzBtF,EAAMsF,EAAuB,GAAXrC,EAAe,GAAK,YACjCoB,EAAkB9E,SAAS+F,EAAuB,GAAXrC,EAAe,IACzDoB,EAAkBZ,KAAK6B,EAAuB,GAAXrC,EAAe,KAIxD,IAAK,IAAIC,EAAIoC,EAAYpC,EAAIoC,EAAyB,GAAXrC,EAAgBC,GAAG,GAC5DlD,EAAMkD,GAAKlD,EAAMkD,GAAGmC,MAAM,GAAI,GAC9BrF,EAAMkD,IAAM,aACPA,EAAE,GAAK,IAAM,IAChBlD,EAAMkD,EAAE,GAAK,YACRmB,EAAkB9E,SAAS2D,EAAE,IAChCmB,EAAkBZ,KAAKP,EAAE,IAEzBA,EAAI,IAAM,IACZlD,EAAMkD,EAAE,GAAK,YACRmB,EAAkB9E,SAAS2D,EAAE,IAChCmB,EAAkBZ,KAAKP,EAAE,KAwB7BuC,CAAmBxD,GAEvBoC,EAAkBZ,KAAK0B,KAOvBjB,eA5NqB,SAACiB,EAAYlD,GAAc,IAI1Cc,GACa,IAFfV,EADFO,aAIE,IACA,IAJAP,EADYS,aAMHb,GACXD,EAAYC,EAAUc,EAAUoC,GAlBhB,WAAO,IAEvBrC,EACET,EADFS,aACET,EADYrC,MAEVkG,SAAQ,SAAA5G,GAAI,MAAW,MAC7B,cAAqB8D,OAAOC,KAAKP,GAAjC,gBAAK,IAAIb,EAAQ,KACfY,EAAWZ,IAabkB,IAmNAyC,kBAhNwB,WAExB,IADA,IAAIE,EAAiB,EACrB,MAA0B1C,OAAO2C,QAAQ1D,EAAIS,cAA7C,oDACWP,QACPuD,IACJ,OAAIA,GAAkB,GA4MtBlD,cA1SiB,EA2SjBD,sBACA+C,iBAhJuB,WACvB1B,EAAkB,WAClBA,EAAkB,cAClBA,EAAkB,WAClBA,EAAkB,aAClBA,EAAkB,cA4IlBV,uBACAe,kBAjCsB,IAmCxB,OAAOhC,GC/TH8D,G,MAAc,CAClBC,EAAG,UACHC,EAAG,aACHC,EAAG,UACHC,EAAG,YACHC,EAAG,cAGCC,EAAgB,CACpBL,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAGQE,EAAM,WAAO,IAAD,EACiBC,oBAAS,kBAAMlE,OADhC,mBACfhD,EADe,KACFmH,EADE,OAEqBD,oBAAS,kBAAMV,OAFpC,mBAEftF,EAFe,KAEAkG,EAFA,OAGGF,oBAAS,iBAAM,YAHlB,mBAGfG,EAHe,KAGTC,EAHS,OAIuBJ,oBAAS,kBAAM,KAJtC,mBAIf9G,EAJe,KAICmH,EAJD,OAKmBL,oBAAS,kBAAM,KALlC,mBAKf9E,EALe,KAKDoF,EALC,OAMSN,oBAAS,iBAAM,MANxB,mBAMfrF,EANe,KAMN4F,EANM,OAOaP,oBAAS,kBAAM,KAP5B,mBAOfQ,EAPe,KAOJC,EAPI,OAQyBT,oBAAS,iBAAM,MARxC,mBAQfpD,EARe,KAQE8D,EARF,KAUvBC,qBAAU,WACc7H,EAAYmG,qBAEhC2B,YAAW,kBAAML,EAAW,YAAW,OACxC,CAACzH,IAEJ6H,qBAAU,WACgB3G,EAAciF,qBAEpC2B,YAAW,kBAAML,EAAW,cAAa,OAC1C,CAACvG,IAEJ2G,qBAAU,YACe,IAAnBzH,GACF2H,MACD,CAAC3H,IAEJyH,qBAAU,WACR,IAAMG,EACJhI,EAAYmG,oBACR8B,EACJ/G,EAAciF,oBACH,aAATkB,GAAwBY,GAAoBD,GAC9CF,WAAWI,EAAsB,OAClC,CAACb,IAEJQ,qBAAU,WACR,IAAMrF,EACJkE,EAAYgB,GACRS,EACJnI,EAAY6D,qBAAqBrB,GACnCoF,EAAmBO,KAClB,CAACT,EAAWtF,IAEf,IAKMN,EAAY,WAChByF,GAAkB,GAClBJ,GAAe,kBAAMnE,OACrBoE,GAAiB,kBAAMZ,OACvBgB,GAAgB,GAChBG,EAAa,GACbF,EAAW,IACXH,EAAQ,WAGJc,EAAa,kBAEbd,EADK,WAATD,EACY,WACA,WASRgB,EAAmB,SAAC3F,GAAD,OACvBoB,EAAgBhE,SAAS4C,IAqErBqF,EAAoB,WACxB,IAAMO,EAAS,eAAOpH,GACtBoH,EAAUrC,mBACVmB,EAAiBkB,IAoBbJ,EAAuB,WAC3BE,IACA,IAAIE,EAAS,eAAOtI,GACpBsI,EAAU/B,iBACVY,EAAemB,IAGjB,OACE,0BAASjI,UAAU,MAAnB,UACe,KAAZwB,EACE,cAAC,EAAD,CACCG,iBAnIiB,WACnB0F,GAAa,IAAMtH,GACrBmH,GAAmBnH,IAkIf0B,UAAWA,EACXG,eAjHe,WACrBuF,GAAiBpF,GACjB,IAAIkG,EAAS,eAAOtI,GACpBsI,EAAUpF,sBACViE,EAAemB,IA8GTlG,aAAcA,EACdF,eA/Ce,WACrB,KAAIwF,GAAa,GAAjB,CACA,IAAMY,EAAS,eAAOtI,GAChBuI,EAAe7B,EAAYgB,EAAU,GAC3CY,EAAUpC,oBAAoBqC,GAC9BpB,EAAemB,GACfX,GAAa,SAAAa,GAAS,OAAIA,EAAU,OA0C9BrG,uBAjGuB,WAC7B,IAAMmG,EAAS,eAAOtI,GACtBsI,EAAUrC,mBACgC,MAA1CqC,EAAUjF,aAAaoF,UAAUhG,KAC7B+E,GAAgB,GAChBA,GAAgB,GACpBL,EAAemB,GACfX,EAAa,IA2FPvH,eAAgBA,IAChB,GAES,KAAZyB,EACG,cAAC,EAAD,CACEzB,eAAgBA,EAChBH,cAjHY,SAAAyC,GACpB,IAAuB,IAAnBtC,GACCiI,EAAiB3F,GAAtB,CACA,IAAM4F,EAAS,eAAOtI,GACtBsI,EAAU7D,eAAe/B,EAAQgE,EAAYgB,IAC7CP,EAAemB,GACfX,GAAa,SAAAa,GAAS,OAAIA,EAAW,OA4G7BrH,mBAzCiB,SAAAuB,GACzB,GAAa,aAAT2E,IAEFrH,EAAYmG,oBACd,CACA,IAAImC,EAAS,eAAOpH,GACZX,EAAU+H,EAAV/H,MACJA,EAAMmC,GAAO5C,SAAS,SACrBS,EAAMmC,GAAO5C,SAAS,SACtBS,EAAMmC,GAAO5C,SAAS,cACtBS,EAAMmC,GAAO5C,SAAS,SAE3BsI,IACAE,EAAU3D,cAAcjC,GACxB0E,EAAiBkB,MA4BTtI,YAAaA,EACbkB,cAAeA,EACfhB,gBAlGc,SAACS,GACvB,KAAI+G,GAAa,GAAjB,CACA,IAAMhF,GAAS/B,EAAEC,OAAOH,GACxB,GAAK4H,EAAiB3F,GAAtB,CAIA,IAAMc,EAAawD,EAAcU,GAAW,EAC5C,GAAItF,EACF,IAAK,IAAIqB,EAAIf,EAAOe,GAAKf,EAAkB,GAAXc,EAAgBC,GAAG,GACjDiF,SAASC,eAAT,UAA2BlF,IACxBpC,MAAMC,gBAAkB,eAE7B,IAAK,IAAImC,EAAIf,EAAOe,GAAKf,EAAMc,EAAYC,IACzCiF,SAASC,eAAT,UAA2BlF,IACxBpC,MAAMC,gBAAkB,eAX7BX,EAAEC,OAAOS,MAAMC,gBAAkB,QA+F3BnB,gBAjFc,SAACQ,GACvB,KAAI+G,GAAa,GAAjB,CACA,IAAMhF,GAAS/B,EAAEC,OAAOH,GACxB,GAAK4H,EAAiB3F,GAAtB,CAOA,IAAMc,EAAawD,EAAcU,GAAW,EAC5C,GAAItF,EACF,IAAK,IAAIqB,EAAIf,EAAOe,GAAKf,EAAkB,GAAXc,EAAgBC,GAAG,GACjDiF,SAASC,eAAT,UAA2BlF,IACxBpC,MAAMC,gBAAkB,uBAE7B,IAAK,IAAImC,EAAIf,EAAOe,GAAKf,EAAMc,EAAYC,IACzCiF,SAASC,eAAT,UAA2BlF,IACxBpC,MAAMC,gBAAkB,uBAdzBtB,EAAYO,MAAMmC,GAAOC,QAAU,EACrChC,EAAEC,OAAOS,MAAMC,gBAAkB,kBAEjCX,EAAEC,OAAOS,MAAMC,gBAAkB,cA4E/B,cAAC,EAAD,CACEO,QAASA,EACTC,UAAWA,IAEJ,KAAZD,EACE,cAAC,EAAD,IACC,OC7NV+G,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFJ,SAASC,eAAe,W","file":"static/js/main.79c7f4ea.chunk.js","sourcesContent":["import React from \"react\"\nimport uniqid from \"uniqid\";\n\nconst classMapping = (tile) => {\n  if (tile.includes(\"hit\")) \n    return \"tile ship--hit\";\n  if (tile.includes(\"destroyed\"))\n    return \"tile ship--destroyed\";\n  if (tile.includes(\"miss\"))\n    return \"tile miss\";\n  if (tile.includes(\"sunk\"))\n    return \"tile ship--sunk\";\n  if (tile !== \"\" && !tile.includes(\"null\")) \n    return \"tile ship\"\n  return \"tile\";\n}\n\nexport const Player = ({playerBoard, addPlayerShip, \n  showShipPreview, hideShipPreview, hasGameStarted}) => {\n  const appendingTiles = () => {\n    let count = -1;\n    const { board } = playerBoard;\n    return board.map(tile => \n      <div \n        className={classMapping(tile)}\n        id={count+=1}\n        onClick={e => addPlayerShip(+e.target.id)}\n        onMouseEnter={showShipPreview}\n        onMouseOut={hideShipPreview}\n        key={uniqid()}>\n      </div>)\n  }\n\n  return(\n    <section \n      className=\"player-board\">\n      <h1>{hasGameStarted ? 'You' : 'Place your ships, ready for battle!'}</h1>\n      <section className={hasGameStarted ? \"board-grid\" : \"board-grid --hover\"}>\n        {appendingTiles()}\n      </section>\n    </section>\n    )\n}\n","import React from \"react\";\nimport uniqid from \"uniqid\";\n\nconst classMapping = tile => {\n  if (tile.includes(\"hit\")) \n    return \"tile ship--hit\";\n  if (tile.includes(\"destroyed\"))\n    return \"tile ship--destroyed\";\n  if (tile.includes(\"miss\"))\n    return \"tile miss\";\n  if (tile.includes(\"sunk\")) \n    return \"tile ship--sunk\";\n  return \"tile\";\n}\n\nexport const Computer = ({computerBoard, handlePlayerAttack, hasGameStarted}) => {\n  const appendingTiles = () => {\n    let count = -1;\n    return computerBoard.board.map(tile => \n      <div \n        className={classMapping(tile)}\n        id={count+=1}\n        onClick={e => handlePlayerAttack(+e.target.id)}\n        onMouseOver={e => e.target.style.backgroundColor = \"#C83737\"}\n        onMouseLeave={e => e.target.style.backgroundColor = \"\"}\n        key={uniqid()}>\n      </div>)\n  }\n\n  return(\n    <section className={!hasGameStarted ? \"computer-board\" : \"computer-board-start\"}>\n      <h1>Computer</h1>\n      <section className=\"board-grid --hover\">\n        {appendingTiles()}\n      </section>\n    </section>\n    )\n}\n","import React from \"react\";\nimport { Player } from \"../Player/Player\";\nimport { Computer } from \"../Computer/Computer\";\n\nexport const GameBoard = ({hasGameStarted, addPlayerShip, \n  handlePlayerAttack, playerBoard, computerBoard, \n  showShipPreview, hideShipPreview}) => {\n  return(\n    <section className=\"game-board\">\n      <Player \n        playerBoard={playerBoard}\n        addPlayerShip={addPlayerShip}\n        showShipPreview={showShipPreview}\n        hideShipPreview={hideShipPreview}\n        hasGameStarted={hasGameStarted}/>\n      {hasGameStarted === false\n        ? \"\"\n        : <Computer \n          computerBoard={computerBoard}\n          handlePlayerAttack={handlePlayerAttack}\n          hasGameStarted={hasGameStarted}/>}\n    </section>\n    )\n}\n","import React from \"react\"\n\nconst DefeatScreen = ({prop}) => {\n  return (\n    <section className={prop}>\n      <h1>YOU LOST!</h1>\n      <h3>Click anywhere to play again</h3>\n    </section>\n  )\n}\n\nconst WinScreen = ({prop}) => {\n  return (\n    <section className={prop}>\n      <h1>YOU WON!</h1>\n      <h3>Click anywhere to play again</h3>\n    </section>\n  )\n}\n\nexport const EndScreen = ({whoLost, resetGame}) => {\n  return(\n    <section onClick={resetGame}>\n      {whoLost === \"computer\"\n        ? <WinScreen prop={\"end --win\"}/>\n        : <DefeatScreen prop={\"end --defeat\"}/>}\n    </section>\n    )\n}\n","import React from \"react\"\n\nexport const Header = ({triggerGameStart, switchShipAxis,\nremoveLastShip, randomlyAddPlayerShips, verticalAxis, \n  hasGameStarted, resetGame}) => {\n  return(\n    <header>\n      <button onClick={hasGameStarted ? resetGame : triggerGameStart}>\n        {hasGameStarted ? \"Restart\" : \"Start Game\"}\n      </button>\n      {!hasGameStarted \n        ? <button className=\"switch-axis-btn\" onClick={switchShipAxis}>AXIS: {verticalAxis ? \"Y\" : \"X\"}</button>\n        : \"\"}\n      {!hasGameStarted \n        ?<button className=\"remove-ship-btn\" onClick={removeLastShip}>Remove ship</button>\n        : \"\"}\n      {!hasGameStarted \n        ?<button onClick={randomlyAddPlayerShips}>Random Ships</button>\n        : \"\"}\n    </header>\n    )\n}\n","import React from \"react\"\n\nexport const Footer = () => {\n  return(\n    <footer>\n      <h3>This Project is part of \n        <a href=\"https://www.theodinproject.com/\" target=\"_blank\">\n          The odin Project's\n        </a>\n      Full Stack Javascript Curriculum</h3>\n    </footer>\n    )\n}\n","export const shipFactory = (shipName, axis, index) => {\n  const LENGTH_MAPPING = {\n    'Carrier': 5,\n    'Battleship': 4,\n    'Cruiser': 3,\n    'Submarine': 3,\n    'Destroyer': 2\n  }\n  const length = LENGTH_MAPPING[shipName]\n  let hits = 0;\n  let isSunk = false;\n  const setSunk = () => {\n    if (obj.hits >= length) obj.isSunk = true;\n  };\n  const addHit = () => {\n    obj.hits++;\n    setSunk();\n  };\n  const obj = { shipName, length, index, hits, axis, isSunk, addHit };\n  return obj;\n};\n","import { shipFactory } from \"../ship_factory/ship_factory\";\n\nexport const playerBoardFactory = () => {\n  let board = [\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n  ]\n  \n  const lengthMapping = {\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"Cruiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n  }\n  \n  let verticalShip = false;\n  const changeShipDirection = () => \n    obj.verticalShip = !obj.verticalShip;\n\n  const shipsOnBoard = {};\n\n  const appendShip = (shipName) => {\n    const { \n      board, shipsOnBoard \n    } = obj;\n    const shipAxis = \n      shipsOnBoard[shipName].axis;\n    const tileStart = \n      shipsOnBoard[shipName].index;\n    const shipLength = \n      lengthMapping[shipName];\n\n    let count = 1;\n    if (shipAxis === \"X\") {\n      if (tileStart % 10 != 0) {\n        board[tileStart-1] = \"null\";\n        if (board[(tileStart-1)+10] === \"\")\n          board[(tileStart-1)+10] = \"null\";\n        if (board[(tileStart-1)-10] === \"\")\n          board[(tileStart-1)-10] = \"null\";\n      }\n      if ((tileStart + shipLength) % 10 != 0) {\n        board[tileStart + shipLength] = \"null\";\n        if (board[(tileStart + shipLength)+10] === \"\")\n          board[(tileStart + shipLength)+10] = \"null\";\n        if (board[(tileStart + shipLength)-10] === \"\")\n          board[(tileStart + shipLength)-10] = \"null\";\n      }\n      for (let i = tileStart; i < tileStart + shipLength; i++) {\n        board[i] = `${shipName}${count}`;\n        if (i+10 < 100)\n          board[i+10] = \"null\";\n        if (i-10 > -1)\n          board[i-10] = \"null\";\n        count++;\n      }\n    } else {\n      if (tileStart >= 10) {\n        board[tileStart-10] = \"null\";\n        if (board[tileStart-10+1] == \"\" && (tileStart-9) % 10 != 0)\n          board[tileStart-10+1] = \"null\";\n        if (board[tileStart-10-1] == \"\" && tileStart % 10 != 0)\n          board[tileStart-10-1] = \"null\";\n      }\n      if ((tileStart + (10 * shipLength)) < 100) {\n        board[tileStart+(10 * shipLength)] = \"null\";\n        if (board[(tileStart+(10*shipLength))+1] == \"\" && (tileStart-9) % 10 != 0)\n          board[(tileStart+(10*shipLength))+1] = \"null\";\n        if (board[(tileStart+(10*shipLength))-1] == \"\" && tileStart % 10 != 0)\n          board[(tileStart+(10*shipLength))-1] = \"null\";\n      }\n      for (let i = tileStart; i < tileStart + (10 * shipsOnBoard[shipName].length); i+=10) {\n        board[i] = `${shipName}${count}`;\n        if (i % 10 != 0)\n          board[i-1] = \"null\";\n        if ((i-9) % 10 != 0)\n          board[i+1] = \"null\";\n        count++;\n      }\n    }\n  }\n\n  const updateBoard = () => {\n    const { \n      shipsOnBoard, board \n    } = obj;\n    for (let i = 0; i < board.length; i++)\n      board[i] = '';\n    for (let shipName of Object.keys(shipsOnBoard)) \n      appendShip(shipName);\n  }\n\n  const addShipToBoard = (coordinate, shipName) => {\n    const {\n      verticalShip, shipsOnBoard\n    } = obj;\n    const shipAxis = \n      verticalShip === false\n      ? \"X\"\n      : \"Y\";\n    shipsOnBoard[shipName] = \n      shipFactory(shipName, shipAxis, coordinate);\n    updateBoard();\n  }\n\n  const removeShipFromBoard = (shipName) => {\n    delete obj.shipsOnBoard[shipName];\n    updateBoard();\n  }\n\n  const checkAvailableSpaces = (shipName) => {\n    const {\n      board, verticalShip\n    } = obj;\n    const shipLength = lengthMapping[shipName];\n    let availableSpaces = [];\n    if (verticalShip) \n      for (let i = 0; i < board.length; i++) {\n        if (i + (shipLength*10) > 109)\n          continue\n        if (board[i] === \"\") {\n          let count = 1;\n          for (let j = i+10; j < ((shipLength) * 10)+i; j+=10) {\n            if (board[j] === \"\") \n              count++;\n            else break;\n          }\n          if (count === shipLength)\n            availableSpaces.push(i);\n        }\n      }\n    else {\n      for (let i = 0; i < 100; i++) {\n        const strNum = `${i}`;\n        if (board[i] === \"\" && (strNum[1] < 11-shipLength || strNum < 11-shipLength)) {\n          let count = 1;\n          for (let j = i+1; j < (shipLength)+i; j++) {\n            if (board[j] === \"\") {\n              count++;\n            }\n            else break;\n          }\n          if (count === shipLength)\n            availableSpaces.push(i);\n        }\n      }\n    }\n    return availableSpaces;\n  }\n\n  const changeDirectionRandomly = () => \n    Math.random() > 0.5\n      ? changeShipDirection()\n      : \"\";\n\n  const pickRandomCoordinate = (num = 100) => \n    Math.floor(Math.random() * num);\n\n  const addIndividualShip = (shipName) => {\n    changeDirectionRandomly();\n    let availableSpaces = checkAvailableSpaces(shipName);\n    if (availableSpaces.length === 0) {\n      obj.changeShipDirection();\n      availableSpaces = checkAvailableSpaces(shipName);\n    }\n    const randomIndex = pickRandomCoordinate(availableSpaces.length);\n    obj.addShipToBoard(availableSpaces[randomIndex], shipName);\n  }\n\n\n  const randomlyAddShips = () => {\n    addIndividualShip(\"Carrier\");\n    addIndividualShip(\"Battleship\");\n    addIndividualShip(\"Cruiser\");\n    addIndividualShip(\"Submarine\");\n    addIndividualShip(\"Destroyer\");\n  }\n\n  const checkingForDefeat = (returnCount) => {\n    let sunkShipsCount = 0;\n    for (const [key, ship] of Object.entries(obj.shipsOnBoard)) \n      if (ship.isSunk) \n        sunkShipsCount++;\n    if (sunkShipsCount >= 5) \n      return true;\n    if (returnCount)\n      return sunkShipsCount;\n    return false;\n  }\n\n  const setShipAsDestroyed = (shipName) => {\n    let {\n      board, shipsOnBoard,\n      attackedPositions\n    } = obj;\n    const shipLength = lengthMapping[shipName];\n    const startIndex = board.indexOf(\n      board.find(tile => tile.includes(`${shipName}1`))\n    );\n    if (shipsOnBoard[shipName].axis === \"X\") {\n      if (startIndex % 10 != 0) {\n        board[startIndex-1] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex-1))\n          attackedPositions.push(startIndex-1);\n        if (startIndex-11 >= 0) {\n          board[startIndex-11] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-11))\n            attackedPositions.push(startIndex-11);\n        }\n        if(startIndex+9 < 100) {\n          board[startIndex+9] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex+9))\n            attackedPositions.push(startIndex+9);\n        }\n      }\n      if ((startIndex+shipLength) % 10 != 0) {\n        board[startIndex+shipLength] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex+shipLength))\n          attackedPositions.push(startIndex+shipLength);\n        if (startIndex+shipLength-10 >= 0) {\n          board[startIndex+shipLength-10] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+shipLength-10))\n            attackedPositions.push(startIndex+shipLength-10);\n        }\n        if (startIndex+shipLength+10 < 100) {\n          board[startIndex+shipLength+10] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+shipLength+10))\n            attackedPositions.push(startIndex+shipLength+10);\n        }\n      }\n\n      for (let i = startIndex; i < startIndex + shipLength; i++) {\n        board[i] = board[i].slice(0, -3);\n        board[i] += \"destroyed\";\n        if (i+10 < 100) {\n          board[i+10] = \"null-sunk\";\n          if (!attackedPositions.includes(i+10))\n            attackedPositions.push(i+10);\n        }\n        if (i-10 >= 0) {\n          board[i-10] = \"null-sunk\";\n          if (!attackedPositions.includes(i-10))\n            attackedPositions.push(i-10);\n        }\n      }\n    }\n    else {\n      if (startIndex-10 >= 0) {\n        board[startIndex-10] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex-10))\n          attackedPositions.push(startIndex-10);\n        if (startIndex % 10 != 0) {\n          board[startIndex-11] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-11))\n            attackedPositions.push(startIndex-11);\n        }\n        if((startIndex-9) % 10 != 0) {\n          board[startIndex-9] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-9))\n            attackedPositions.push(startIndex-9);\n        }\n      }\n      if (startIndex+(shipLength*10) < 100) {\n        board[startIndex+(shipLength*10)] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex+(shipLength*10)))\n          attackedPositions.push(startIndex+(shipLength*10));\n        if (startIndex % 10 != 0) {\n          board[startIndex+(shipLength*10)-1] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+(shipLength*10)-1))\n            attackedPositions.push(startIndex+(shipLength*10)-1);\n        }\n        if ((startIndex-9) % 10 != 0) {\n          board[startIndex+(shipLength*10)+1] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+(shipLength*10)+1))\n            attackedPositions.push(startIndex+(shipLength*10)+1);\n        }\n      }\n\n      for (let i = startIndex; i < startIndex + (shipLength*10); i+=10) {\n        board[i] = board[i].slice(0, -3);\n        board[i] += \"destroyed\";\n        if ((i-9) % 10 != 0) {\n          board[i+1] = \"null-sunk\";\n          if (!attackedPositions.includes(i+1))\n            attackedPositions.push(i+1);\n        }\n        if (i % 10 != 0) {\n          board[i-1] = \"null-sunk\";\n          if (!attackedPositions.includes(i-1))\n            attackedPositions.push(i-1);\n        }\n      }\n    }\n  }\n\n  let attackedPositions = [];\n  let lastHitIndex;\n  let shipToDestroy = \"\";\n  let posiblePositions = [];\n\n  const recieveAttack = (coordinate) => {\n    let { \n      board, shipsOnBoard,\n      attackedPositions\n    } = obj;\n    const tileAttacked = board[coordinate];\n    if (tileAttacked === '') \n      board[coordinate] = 'miss';  \n    else if (tileAttacked === 'null') \n      board[coordinate] += '-miss';\n    else {\n      const shipName = tileAttacked.slice(0, -1);\n      shipsOnBoard[shipName].addHit();\n      board[coordinate] += '-hit';\n      if (shipsOnBoard[shipName].isSunk) {\n        setShipAsDestroyed(shipName);\n        obj.shipToDestroy = \"\";\n      }\n      else {\n        obj.lastHitIndex = coordinate;\n        obj.shipToDestroy = shipName;\n      }\n    }\n    attackedPositions.push(coordinate);\n    obj.posiblePositions = [];\n  }\n\n  const checkImposiblePositions = () => {\n    const { attackedPositions } = obj;\n    const imposiblePositions = [];\n    for (let i = 0; i < 100; i++) {\n      if (attackedPositions.includes(i)) \n        continue;\n      let count = 0;\n      if (i % 10 === 0 || attackedPositions.includes(i-1))\n        count++;\n      if ((i-9) % 10 === 0 || attackedPositions.includes(i+1))\n        count++;\n      if (i-10 < 0 || attackedPositions.includes(i-10))\n        count++;\n      if (i+10 > 100 || attackedPositions.includes(i+10))\n        count++;\n      if (count >= 4)\n        imposiblePositions.push(i);\n    }\n    return imposiblePositions;\n  }\n\n  const computerRandomAttack = () => {\n    let { \n      recieveAttack, attackedPositions,\n    } = obj;\n    const imposiblePositions = checkImposiblePositions();\n    console.log(imposiblePositions);\n    let newCoordinate = \n      pickRandomCoordinate();\n    while (attackedPositions.includes(newCoordinate) || imposiblePositions.includes(newCoordinate)) \n      newCoordinate  = pickRandomCoordinate();\n    recieveAttack(newCoordinate);\n  }\n\n  const checkPositionsBeforeAttack = () => {\n    let { board, lastHitIndex,\n      shipToDestroy, shipsOnBoard,\n      attackedPositions, posiblePositions\n    } = obj;\n\n    if (shipsOnBoard[shipToDestroy].hits > 1) {\n      let firstHit;\n      let lastHit;\n      for (let i = 0; firstHit === undefined; i++)\n        if ( board[i].includes(shipToDestroy) && board[i].includes('hit'))\n          firstHit = i;\n      for (let i = 99; lastHit === undefined; i--)\n        if (board[i].includes(shipToDestroy) && board[i].includes('hit'))\n          lastHit = i;\n      if (shipsOnBoard[shipToDestroy].axis == \"X\") {\n        if (!attackedPositions.includes(firstHit-1) && firstHit % 10 !== 0)\n          posiblePositions.push(firstHit-1);\n        if (!attackedPositions.includes(lastHit+1) && (lastHit-9) % 10 !== 0)\n          posiblePositions.push(lastHit+1);\n      }\n      else {\n        if (!attackedPositions.includes(firstHit-10) && firstHit-10 > -1)\n          posiblePositions.push(firstHit-10);\n        if (!attackedPositions.includes(lastHit+10) && lastHit+10 < 100)\n          posiblePositions.push(lastHit+10);\n      }\n      return;\n    }\n\n    if (lastHitIndex+10 < 100)\n      if (!attackedPositions.includes(lastHitIndex+10)) \n        posiblePositions.push(lastHitIndex+10);\n    if (lastHitIndex-10 >= 0)\n      if (!attackedPositions.includes(lastHitIndex-10)) \n        posiblePositions.push(lastHitIndex-10);\n    if ((lastHitIndex-9) % 10 !== 0)\n      if (!attackedPositions.includes(lastHitIndex+1)) \n        posiblePositions.push(lastHitIndex+1);\n    if (lastHitIndex % 10 !== 0)\n      if (!attackedPositions.includes(lastHitIndex-1)) \n        posiblePositions.push(lastHitIndex-1);\n  }\n\n  const computerSentientAttack = () => {\n    let { recieveAttack, posiblePositions } = obj;\n    checkPositionsBeforeAttack();\n    const randomIndex = Math.floor(Math.random() * posiblePositions.length);\n    recieveAttack(posiblePositions[randomIndex]);\n  }\n\n  const computerAttack = () => {\n    let { shipToDestroy } = obj;\n    if (shipToDestroy === \"\") \n      computerRandomAttack();\n    else \n      computerSentientAttack();\n  }\n\n  const obj = { \n    board, \n    shipsOnBoard, \n    recieveAttack,\n    addShipToBoard,\n    randomlyAddShips,\n    removeShipFromBoard,\n    checkAvailableSpaces,\n    checkingForDefeat,\n    verticalShip,\n    changeShipDirection,\n    attackedPositions,\n    lastHitIndex,\n    posiblePositions,\n    shipToDestroy,\n    computerRandomAttack,\n    computerAttack\n  };\n  return obj;\n}\n","import { shipFactory } from \"../ship_factory/ship_factory\";\n\nexport const computerBoardFactory = () => {\n  let board = [\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n  ]\n  \n  const lengthMapping = {\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"Cruiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n  }\n\n  let verticalShip = false;\n  const changeShipDirection = () => \n    obj.verticalShip = !obj.verticalShip;\n\n  const shipsOnBoard = {};\n\n  const appendShip = (shipName) => {\n    const { \n      board, shipsOnBoard \n    } = obj;\n    const shipAxis = \n      shipsOnBoard[shipName].axis;\n    const tileStart = \n      shipsOnBoard[shipName].index;\n    const shipLength = \n      lengthMapping[shipName];\n\n    let count = 1;\n    if (shipAxis === \"X\") {\n      if (tileStart % 10 != 0) {\n        board[tileStart-1] = \"null\";\n        if (board[(tileStart-1)+10] === \"\")\n          board[(tileStart-1)+10] = \"null\";\n        if (board[(tileStart-1)-10] === \"\")\n          board[(tileStart-1)-10] = \"null\";\n      }\n      if ((tileStart + shipLength) % 10 != 0) {\n        board[tileStart + shipLength] = \"null\";\n        if (board[(tileStart + shipLength)+10] === \"\")\n          board[(tileStart + shipLength)+10] = \"null\";\n        if (board[(tileStart + shipLength)-10] === \"\")\n          board[(tileStart + shipLength)-10] = \"null\";\n      }\n      for (let i = tileStart; i < tileStart + shipLength; i++) {\n        board[i] = `${shipName}${count}`;\n        if (i+10 < 100)\n          board[i+10] = \"null\";\n        if (i-10 > -1)\n          board[i-10] = \"null\";\n        count++;\n      }\n    } else {\n      if (tileStart >= 10) {\n        board[tileStart-10] = \"null\";\n        if (board[tileStart-10+1] == \"\" && (tileStart-9) % 10 != 0)\n          board[tileStart-10+1] = \"null\";\n        if (board[tileStart-10-1] == \"\" && tileStart % 10 != 0)\n          board[tileStart-10-1] = \"null\";\n      }\n      if ((tileStart + (10 * shipLength)) < 100) {\n        board[tileStart+(10 * shipLength)] = \"null\";\n        if (board[(tileStart+(10*shipLength))+1] == \"\" && (tileStart-9) % 10 != 0)\n          board[(tileStart+(10*shipLength))+1] = \"null\";\n        if (board[(tileStart+(10*shipLength))-1] == \"\" && tileStart % 10 != 0)\n          board[(tileStart+(10*shipLength))-1] = \"null\";\n      }\n      for (let i = tileStart; i < tileStart + (10 * shipsOnBoard[shipName].length); i+=10) {\n        board[i] = `${shipName}${count}`;\n        if (i % 10 != 0)\n          board[i-1] = \"null\";\n        if ((i-9) % 10 != 0)\n          board[i+1] = \"null\";\n        count++;\n      }\n    }\n  }\n\n  const updateBoard = () => {\n    const { \n      shipsOnBoard, board \n    } = obj;\n    board.forEach(tile => tile = '');\n    for (let shipName of Object.keys(shipsOnBoard)) \n      appendShip(shipName);\n  }\n\n  const addShipToBoard = (coordinate, shipName) => {\n    const {\n      verticalShip, shipsOnBoard\n    } = obj;\n    const shipAxis = \n      verticalShip === false\n      ? \"X\"\n      : \"Y\";\n    shipsOnBoard[shipName] = \n      shipFactory(shipName, shipAxis, coordinate);\n    updateBoard();\n  }\n\n  const checkingForDefeat = () => {\n    let sunkShipsCount = 0;\n    for (const [key, ship] of Object.entries(obj.shipsOnBoard)) \n      if (ship.isSunk) \n        sunkShipsCount++;\n    if (sunkShipsCount >= 5) \n      return true;\n    return false;\n  }\n\n  const checkAvailableSpaces = (shipName) => {\n    const shipLength = lengthMapping[shipName];\n    let availableSpaces = [];\n    if (obj.verticalShip) \n      for (let i = 0; i < obj.board.length; i++) {\n        if (i + (shipLength*10) > 109)\n          continue\n        if (obj.board[i] === \"\") {\n          let count = 1;\n          for (let j = i+10; j < ((shipLength) * 10)+i; j+=10) {\n            if (obj.board[j] === \"\") \n              count++;\n            else break;\n          }\n          if (count === shipLength)\n            availableSpaces.push(i);\n        }\n      }\n    else {\n      for (let i = 0; i < obj.board.length; i++) {\n        const strNum = `${i}`;\n        if (obj.board[i] === \"\" && (strNum[1] < 11-shipLength || strNum < 11-shipLength)) {\n          let count = 1;\n          for (let j = i+1; j < (shipLength)+i; j++) {\n            if (obj.board[j] === \"\") {\n              count++;\n            }\n            else break;\n          }\n          if (count === shipLength)\n            availableSpaces.push(i);\n        }\n      }\n    }\n    return availableSpaces;\n  }\n\n  const changeDirectionRandomly = () => \n    Math.random() > 0.5\n      ? changeShipDirection()\n      : \"\";\n\n  const pickRandomCoordinate = (num = 100) => \n    Math.floor(Math.random() * num);\n\n  const addIndividualShip = (shipName) => {\n    changeDirectionRandomly();\n    let availableSpaces = checkAvailableSpaces(shipName);\n    if (availableSpaces.length === 0) {\n      obj.changeShipDirection();\n      availableSpaces = checkAvailableSpaces(shipName);\n    }\n    const randomIndex = pickRandomCoordinate(availableSpaces.length);\n    obj.addShipToBoard(availableSpaces[randomIndex], shipName);\n  }\n\n\n  const randomlyAddShips = () => {\n    addIndividualShip(\"Carrier\");\n    addIndividualShip(\"Battleship\");\n    addIndividualShip(\"Cruiser\");\n    addIndividualShip(\"Submarine\");\n    addIndividualShip(\"Destroyer\");\n  }\n\n  const setShipAsDestroyed = (shipName) => {\n    let {\n      board, shipsOnBoard,\n      attackedPositions\n    } = obj;\n    const shipLength = lengthMapping[shipName];\n    const startIndex = board.indexOf(\n      board.find(tile => tile.includes(`${shipName}1`))\n    );\n    if (shipsOnBoard[shipName].axis === \"X\") {\n      if (startIndex % 10 != 0) {\n        board[startIndex-1] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex-1))\n          attackedPositions.push(startIndex-1);\n        if (startIndex-11 >= 0) {\n          board[startIndex-11] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-11))\n            attackedPositions.push(startIndex-11);\n        }\n        if(startIndex+9 < 100) {\n          board[startIndex+9] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex+9))\n            attackedPositions.push(startIndex+9);\n        }\n      }\n      if ((startIndex+shipLength) % 10 != 0) {\n        board[startIndex+shipLength] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex+shipLength))\n          attackedPositions.push(startIndex+shipLength);\n        if (startIndex+shipLength-10 >= 0) {\n          board[startIndex+shipLength-10] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+shipLength-10))\n            attackedPositions.push(startIndex+shipLength-10);\n        }\n        if (startIndex+shipLength+10 < 100) {\n          board[startIndex+shipLength+10] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+shipLength+10))\n            attackedPositions.push(startIndex+shipLength+10);\n        }\n      }\n\n      for (let i = startIndex; i < startIndex + shipLength; i++) {\n        board[i] = board[i].slice(0, -3);\n        board[i] += \"destroyed\";\n        if (i+10 < 100) {\n          board[i+10] = \"null-sunk\";\n          if (!attackedPositions.includes(i+10))\n            attackedPositions.push(i+10);\n        }\n        if (i-10 >= 0) {\n          board[i-10] = \"null-sunk\";\n          if (!attackedPositions.includes(i-10))\n            attackedPositions.push(i-10);\n        }\n      }\n    }\n    else {\n      if (startIndex-10 >= 0) {\n        board[startIndex-10] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex-10))\n          attackedPositions.push(startIndex-10);\n        if (startIndex % 10 != 0) {\n          board[startIndex-11] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-11))\n            attackedPositions.push(startIndex-11);\n        }\n        if((startIndex-9) % 10 != 0) {\n          board[startIndex-9] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-9))\n            attackedPositions.push(startIndex-9);\n        }\n      }\n      if (startIndex+(shipLength*10) < 100) {\n        board[startIndex+(shipLength*10)] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex+(shipLength*10)))\n          attackedPositions.push(startIndex+(shipLength*10));\n        if (startIndex % 10 != 0) {\n          board[startIndex+(shipLength*10)-1] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+(shipLength*10)-1))\n            attackedPositions.push(startIndex+(shipLength*10)-1);\n        }\n        if ((startIndex-9) % 10 != 0) {\n          board[startIndex+(shipLength*10)+1] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+(shipLength*10)+1))\n            attackedPositions.push(startIndex+(shipLength*10)+1);\n        }\n      }\n\n      for (let i = startIndex; i < startIndex + (shipLength*10); i+=10) {\n        board[i] = board[i].slice(0, -3);\n        board[i] += \"destroyed\";\n        if ((i-9) % 10 != 0) {\n          board[i+1] = \"null-sunk\";\n          if (!attackedPositions.includes(i+1))\n            attackedPositions.push(i+1);\n        }\n        if (i % 10 != 0) {\n          board[i-1] = \"null-sunk\";\n          if (!attackedPositions.includes(i-1))\n            attackedPositions.push(i-1);\n        }\n      }\n    }\n  }\n\n  let attackedPositions = [];\n\n  const recieveAttack = (coordinate) => {\n    let { \n      board, shipsOnBoard,\n      attackedPositions\n    } = obj;\n    if (attackedPositions.includes(coordinate)) return;\n    const tileAttacked = board[coordinate];\n    if (tileAttacked === '') \n      board[coordinate] = 'miss';  \n    else if (tileAttacked === 'null') \n      board[coordinate] += '-miss';\n    else {\n      const shipName = tileAttacked.slice(0, -1);\n      shipsOnBoard[shipName].addHit();\n      board[coordinate] += '-hit';\n      if (shipsOnBoard[shipName].isSunk) \n        setShipAsDestroyed(shipName);\n    }\n    attackedPositions.push(coordinate);\n  }\n\n  const obj = { \n    board, \n    shipsOnBoard, \n    recieveAttack,\n    addShipToBoard,\n    checkingForDefeat,\n    verticalShip,\n    changeShipDirection,\n    randomlyAddShips,\n    checkAvailableSpaces,\n    attackedPositions,\n  };\n  return obj;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { GameBoard } from \"./components/GameBoard/GameBoard\";\nimport { EndScreen } from \"./components/EndScreen/EndScreen\";\nimport { Header } from \"./components/Header/Header\";\nimport { Footer } from \"./components/Footer/Footer\";\nimport { playerBoardFactory } from \"./utils/player_board_factory/player_board_factory\"\nimport { computerBoardFactory } from \"./utils/computer_board_factory/computer_board_factory\"\nimport \"./App.scss\";\n\nconst shipNameMap = {\n  0: \"Carrier\",\n  1: \"Battleship\",\n  2: \"Cruiser\",\n  3: \"Submarine\",\n  4: \"Destroyer\"\n}\n\nconst shipLengthMap = {\n  0: 5,\n  1: 4,\n  2: 3,\n  3: 3,\n  4: 2\n}\n\nexport const App = () => {\n  const [ playerBoard, setPlayerBoard ] = useState(() => playerBoardFactory());\n  const [ computerBoard, setComputerBoard ] = useState(() => computerBoardFactory());\n  const [ turn, setTurn ] = useState(() => \"player\");\n  const [ hasGameStarted, setHasGameStarted ] = useState(() => false);\n  const [ verticalAxis, setVerticalAxis ] = useState(() => false);\n  const [ whoLost, setWhoLost ] = useState(() => \"\");\n  const [ shipCount, setShipCount ] = useState(() => 0);\n  const [ availableSpaces, setAvailableSpaces ] = useState(() => []);\n\n  useEffect(() => {\n    const didPlayerLose = playerBoard.checkingForDefeat();\n    if (didPlayerLose) \n      setTimeout(() => setWhoLost(\"player\"), 2000);\n  }, [playerBoard]);\n\n  useEffect(() => {\n    const didComputerLose = computerBoard.checkingForDefeat();\n    if (didComputerLose) \n      setTimeout(() => setWhoLost(\"computer\"), 2000);\n  }, [computerBoard]);\n\n  useEffect(() => {\n    if (hasGameStarted === true)\n      sortComputerShips();\n  }, [hasGameStarted])\n\n  useEffect(() => {\n    const didPlayerLose = \n      playerBoard.checkingForDefeat();\n    const didComputerLose = \n      computerBoard.checkingForDefeat();\n    if (turn === \"computer\" && !didComputerLose && !didPlayerLose) \n      setTimeout(handleComputerAttack, 1000);\n  }, [turn])\n\n  useEffect(() => {\n    const shipName =\n      shipNameMap[shipCount];\n    const newSpaces = \n      playerBoard.checkAvailableSpaces(shipName);\n    setAvailableSpaces(newSpaces);\n  }, [shipCount, verticalAxis]);\n\n  const triggerGameStart = () => {\n    if (shipCount >= 5 && !hasGameStarted)\n      setHasGameStarted(!hasGameStarted);\n  }\n\n  const resetGame = () => {\n    setHasGameStarted(false);\n    setPlayerBoard(() => playerBoardFactory());\n    setComputerBoard(() => computerBoardFactory());\n    setVerticalAxis(false);\n    setShipCount(0);\n    setWhoLost(\"\");\n    setTurn(\"player\");\n  }\n\n  const switchTurn = () => \n    turn === \"player\"\n      ? setTurn(\"computer\")\n      : setTurn(\"player\");\n\n  const switchShipAxis = () => {\n    setVerticalAxis(!verticalAxis);\n    let boardCopy = {...playerBoard};\n    boardCopy.changeShipDirection();\n    setPlayerBoard(boardCopy);\n  }\n\n  const isPositionViable = (index) => \n    availableSpaces.includes(index)\n\n  const addPlayerShip = index => {\n    if (hasGameStarted === true) return;\n    if (!isPositionViable(index)) return;\n    const boardCopy = {...playerBoard};\n    boardCopy.addShipToBoard(index , shipNameMap[shipCount]);\n    setPlayerBoard(boardCopy);\n    setShipCount(prevValue => prevValue+=1)\n  }\n\n  const randomlyAddPlayerShips = () => {\n    const boardCopy = {...playerBoard};\n    boardCopy.randomlyAddShips();\n    boardCopy.shipsOnBoard.Destroyer.axis === \"Y\"\n      ? setVerticalAxis(true)\n      : setVerticalAxis(false);\n    setPlayerBoard(boardCopy);\n    setShipCount(5);\n  }\n\n  const showShipPreview = (e) => {\n    if (shipCount >= 5) return;\n    const index = +e.target.id;\n    if (!isPositionViable(index)) {\n      e.target.style.backgroundColor = \"red\";\n      return;\n    }\n    const shipLength = shipLengthMap[shipCount]-1;\n    if (verticalAxis) \n      for (let i = index; i <= index+(shipLength*10); i+=10) \n        document.getElementById(`${i}`)\n          .style.backgroundColor = \"#00b4d8\";\n    else \n      for (let i = index; i <= index+shipLength; i++) \n        document.getElementById(`${i}`)\n          .style.backgroundColor = \"#00b4d8\";\n  }\n\n  const hideShipPreview = (e) => {\n    if (shipCount >= 5) return;\n    const index = +e.target.id;\n    if (!isPositionViable(index)) {\n      if (playerBoard.board[index].length <= 4)\n        e.target.style.backgroundColor = \"rgb(30, 30, 30)\";\n      else\n        e.target.style.backgroundColor = \"#3E78B2\";\n      return;\n    }\n    const shipLength = shipLengthMap[shipCount]-1;\n    if (verticalAxis) \n      for (let i = index; i <= index+(shipLength*10); i+=10) \n        document.getElementById(`${i}`)\n          .style.backgroundColor = \"rgb(30, 30, 30)\";\n    else \n      for (let i = index; i <= index+shipLength; i++) \n        document.getElementById(`${i}`)\n          .style.backgroundColor = \"rgb(30, 30, 30)\";\n  }\n\n  const removeLastShip = () => {\n    if (shipCount <= 0) return;\n    const boardCopy = {...playerBoard};\n    const shipToRemove = shipNameMap[shipCount-1];\n    boardCopy.removeShipFromBoard(shipToRemove);\n    setPlayerBoard(boardCopy);\n    setShipCount(prevValue => prevValue-1);\n  }\n\n  const sortComputerShips = () => {\n    const boardCopy = {...computerBoard};\n    boardCopy.randomlyAddShips();\n    setComputerBoard(boardCopy);\n  }\n\n  const handlePlayerAttack = index => {\n    if (turn === \"computer\") return;\n    const didPlayerLose = \n      playerBoard.checkingForDefeat();\n    if (didPlayerLose) return;\n    let boardCopy = {...computerBoard};\n    const { board } = boardCopy;\n    if (board[index].includes(\"miss\") \n      || board[index].includes(\"sunk\") \n      || board[index].includes(\"destroyed\")\n      || board[index].includes(\"hit\"))\n      return;\n    switchTurn();\n    boardCopy.recieveAttack(index);\n    setComputerBoard(boardCopy);\n  }\n\n  const handleComputerAttack = () => {\n    switchTurn();\n    let boardCopy = {...playerBoard};\n    boardCopy.computerAttack();\n    setPlayerBoard(boardCopy);\n  }\n\n  return (\n    <section className=\"App\">\n      {whoLost === \"\"\n        ?<Header \n          triggerGameStart={triggerGameStart}\n          resetGame={resetGame}\n          switchShipAxis={switchShipAxis}\n          verticalAxis={verticalAxis}\n          removeLastShip={removeLastShip}\n          randomlyAddPlayerShips={randomlyAddPlayerShips}\n          hasGameStarted={hasGameStarted}/>\n        : \"\"\n      }\n      {whoLost === \"\"\n        ? <GameBoard \n            hasGameStarted={hasGameStarted}\n            addPlayerShip={addPlayerShip}\n            handlePlayerAttack={handlePlayerAttack}\n            playerBoard={playerBoard}\n            computerBoard={computerBoard}\n            showShipPreview={showShipPreview}\n            hideShipPreview={hideShipPreview}\n          />\n        : <EndScreen \n            whoLost={whoLost}\n            resetGame={resetGame}/>\n      }\n      {whoLost === \"\"\n        ?<Footer />\n        : \"\"}\n    </section>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}