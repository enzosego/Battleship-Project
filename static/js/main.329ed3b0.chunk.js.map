{"version":3,"sources":["utils/player_board_factory/player_board_factory.js","utils/computer_board_factory/computer_board_factory.js","components/Player/Player.js","components/Computer/Computer.js","components/GameBoard/GameBoard.js","components/EndScreen/EndScreen.js","components/Header/Header.js","components/Footer/Footer.js","App.js","index.js","utils/ship_factory/ship_factory.js"],"names":["shipFactory","require","module","exports","lengthMapping","changeShipDirection","obj","verticalShip","appendShip","shipName","board","shipsOnBoard","shipAxis","axis","tileStart","index","shipLength","count","i","length","updateBoard","Object","keys","checkAvailableSpaces","availableSpaces","j","push","strNum","pickRandomCoordinate","num","Math","floor","random","addIndividualShip","randomIndex","addShipToBoard","computerRandomAttack","recieveAttack","attackedPositions","imposiblePositions","includes","checkImposiblePositions","console","log","newCoordinate","computerSentientAttack","posiblePositions","lastHitIndex","shipToDestroy","hits","firstHit","lastHit","undefined","checkPositionsBeforeAttack","coordinate","tileAttacked","slice","addHit","isSunk","startIndex","indexOf","find","tile","setShipAsDestroyed","randomlyAddShips","removeShipFromBoard","checkingForDefeat","returnCount","sunkShipsCount","entries","computerAttack","forEach","classMapping","Player","playerBoard","addPlayerShip","showShipPreview","hideShipPreview","hasGameStarted","className","map","id","onClick","e","target","onMouseEnter","onMouseOut","uniqid","appendingTiles","Computer","computerBoard","handlePlayerAttack","onMouseOver","style","backgroundColor","onMouseLeave","GameBoard","DefeatScreen","prop","WinScreen","EndScreen","whoLost","resetGame","Header","triggerGameStart","switchShipAxis","removeLastShip","randomlyAddPlayerShips","verticalAxis","Footer","href","playerBoardFactory","computerBoardFactory","shipNameMap","0","1","2","3","4","shipLengthMap","App","useState","setPlayerBoard","setComputerBoard","turn","setTurn","setHasGameStarted","setVerticalAxis","setWhoLost","shipCount","setShipCount","setAvailableSpaces","useEffect","setTimeout","sortComputerShips","didPlayerLose","didComputerLose","handleComputerAttack","newSpaces","switchTurn","isPositionViable","boardCopy","shipToRemove","prevValue","Destroyer","document","getElementById","ReactDOM","render","StrictMode","LENGTH_MAPPING"],"mappings":"kLAAMA,EAAcC,EAAQ,GAkc5BC,EAAOC,QAhcoB,WACzB,IAaMC,EAAgB,CACpB,QAAW,EACX,WAAc,EACd,QAAW,EACX,UAAa,EACb,UAAa,GAITC,EAAsB,kBAC1BC,EAAIC,cAAgBD,EAAIC,cAIpBC,EAAa,SAACC,GAAc,IAE9BC,EACEJ,EADFI,MAAOC,EACLL,EADKK,aAEHC,EACJD,EAAaF,GAAUI,KACnBC,EACJH,EAAaF,GAAUM,MACnBC,EACJZ,EAAcK,GAEZQ,EAAQ,EACZ,GAAiB,MAAbL,EAAkB,CAChBE,EAAY,IAAM,IACpBJ,EAAMI,EAAU,GAAK,OACW,KAA5BJ,EAAOI,EAAU,EAAG,MACtBJ,EAAOI,EAAU,EAAG,IAAM,QACI,KAA5BJ,EAAOI,EAAU,EAAG,MACtBJ,EAAOI,EAAU,EAAG,IAAM,UAEzBA,EAAYE,GAAc,IAAM,IACnCN,EAAMI,EAAYE,GAAc,OACW,KAAvCN,EAAOI,EAAYE,EAAY,MACjCN,EAAOI,EAAYE,EAAY,IAAM,QACI,KAAvCN,EAAOI,EAAYE,EAAY,MACjCN,EAAOI,EAAYE,EAAY,IAAM,SAEzC,IAAK,IAAIE,EAAIJ,EAAWI,EAAIJ,EAAYE,EAAYE,IAClDR,EAAMQ,GAAN,UAAcT,GAAd,OAAyBQ,GACrBC,EAAE,GAAK,MACTR,EAAMQ,EAAE,IAAM,QACZA,EAAE,IAAM,IACVR,EAAMQ,EAAE,IAAM,QAChBD,QAEG,CACDH,GAAa,KACfJ,EAAMI,EAAU,IAAM,OACO,IAAzBJ,EAAMI,EAAU,GAAG,KAAaA,EAAU,GAAK,IAAM,IACvDJ,EAAMI,EAAU,GAAG,GAAK,QACG,IAAzBJ,EAAMI,EAAU,GAAG,IAAYA,EAAY,IAAM,IACnDJ,EAAMI,EAAU,GAAG,GAAK,SAEvBA,EAAa,GAAKE,EAAe,MACpCN,EAAMI,EAAW,GAAKE,GAAe,OACO,IAAxCN,EAAOI,EAAW,GAAGE,EAAa,KAAaF,EAAU,GAAK,IAAM,IACtEJ,EAAOI,EAAW,GAAGE,EAAa,GAAK,QACG,IAAxCN,EAAOI,EAAW,GAAGE,EAAa,IAAYF,EAAY,IAAM,IAClEJ,EAAOI,EAAW,GAAGE,EAAa,GAAK,SAE3C,IAAK,IAAIE,EAAIJ,EAAWI,EAAIJ,EAAa,GAAKH,EAAaF,GAAUU,OAASD,GAAG,GAC/ER,EAAMQ,GAAN,UAAcT,GAAd,OAAyBQ,GACrBC,EAAI,IAAM,IACZR,EAAMQ,EAAE,GAAK,SACVA,EAAE,GAAK,IAAM,IAChBR,EAAMQ,EAAE,GAAK,QACfD,MAKAG,EAAc,WAIlB,IAJyB,IAEvBT,EACEL,EADFK,aAAcD,EACZJ,EADYI,MAEPQ,EAAI,EAAGA,EAAIR,EAAMS,OAAQD,IAChCR,EAAMQ,GAAK,GACb,cAAqBG,OAAOC,KAAKX,GAAjC,gBAAK,IAAIF,EAAQ,KACfD,EAAWC,KAqBTc,EAAuB,SAACd,GAAc,IAExCC,EACEJ,EADFI,MAAOH,EACLD,EADKC,aAEHS,EAAaZ,EAAcK,GAC7Be,EAAkB,GACtB,GAAIjB,GACF,IAAK,IAAIW,EAAI,EAAGA,EAAIR,EAAMS,OAAQD,IAChC,KAAIA,EAAgB,GAAXF,EAAiB,MAET,KAAbN,EAAMQ,GAAW,CAEnB,IADA,IAAID,EAAQ,EACHQ,EAAIP,EAAE,GAAIO,EAAoB,GAAdT,EAAkBE,GACxB,KAAbR,EAAMe,GADkCA,GAAG,GAE7CR,IAGAA,IAAUD,GACZQ,EAAgBE,KAAKR,SAI3B,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAMS,EAAM,UAAMT,GAClB,GAAiB,KAAbR,EAAMQ,KAAcS,EAAO,GAAK,GAAGX,GAAcW,EAAS,GAAGX,GAAa,CAE5E,IADA,IAAIC,EAAQ,EACHQ,EAAIP,EAAE,EAAGO,EAAKT,EAAYE,GAChB,KAAbR,EAAMe,GAD0BA,IAElCR,IAIAA,IAAUD,GACZQ,EAAgBE,KAAKR,IAI7B,OAAOM,GAQHI,EAAuB,eAACC,EAAD,uDAAO,IAAP,OAC3BC,KAAKC,MAAMD,KAAKE,SAAWH,IAEvBI,EAAoB,SAACxB,GAPzBqB,KAAKE,SAAW,IACZ3B,IAQJ,IAAImB,EAAkBD,EAAqBd,GACZ,IAA3Be,EAAgBL,SAClBb,EAAID,sBACJmB,EAAkBD,EAAqBd,IAEzC,IAAMyB,EAAcN,EAAqBJ,EAAgBL,QACzDb,EAAI6B,eAAeX,EAAgBU,GAAczB,IAsL7C2B,EAAuB,WAAO,IAEhCC,EACE/B,EADF+B,cAAeC,EACbhC,EADagC,kBAEXC,EAzBwB,WAG9B,IAHqC,IAC7BD,EAAsBhC,EAAtBgC,kBACFC,EAAqB,GAClBrB,EAAI,EAAGA,EAAI,IAAKA,IACvB,IAAIoB,EAAkBE,SAAStB,GAA/B,CAEA,IAAID,EAAQ,GACRC,EAAI,KAAO,GAAKoB,EAAkBE,SAAStB,EAAE,KAC/CD,MACGC,EAAE,GAAK,KAAO,GAAKoB,EAAkBE,SAAStB,EAAE,KACnDD,KACEC,EAAE,GAAK,GAAKoB,EAAkBE,SAAStB,EAAE,MAC3CD,KACEC,EAAE,GAAK,KAAOoB,EAAkBE,SAAStB,EAAE,MAC7CD,IACEA,GAAS,GACXsB,EAAmBb,KAAKR,GAE5B,OAAOqB,EAOoBE,GAC3BC,QAAQC,IAAIJ,GAGZ,IAFA,IAAIK,EACFhB,IACKU,EAAkBE,SAASI,IAAkBL,EAAmBC,SAASI,IAC9EA,EAAiBhB,IACnBS,EAAcO,IA+CVC,EAAyB,WAAO,IAC9BR,EAAoC/B,EAApC+B,cAAeS,EAAqBxC,EAArBwC,kBA7CY,WAAO,IAClCpC,EAGFJ,EAHEI,MAAOqC,EAGTzC,EAHSyC,aACXC,EAEE1C,EAFF0C,cAAerC,EAEbL,EAFaK,aACf2B,EACEhC,EADFgC,kBAAmBQ,EACjBxC,EADiBwC,iBAGrB,GAAInC,EAAaqC,GAAeC,KAAO,EAAvC,CAGE,IAFA,IAAIC,EACAC,EACKjC,EAAI,OAAgBkC,IAAbF,EAAwBhC,IACjCR,EAAMQ,GAAGsB,SAASQ,IAAkBtC,EAAMQ,GAAGsB,SAAS,SACzDU,EAAWhC,GACf,IAAK,IAAIA,EAAI,QAAgBkC,IAAZD,EAAuBjC,IAClCR,EAAMQ,GAAGsB,SAASQ,IAAkBtC,EAAMQ,GAAGsB,SAAS,SACxDW,EAAUjC,GAC0B,KAApCP,EAAaqC,GAAenC,MACzByB,EAAkBE,SAASU,EAAS,IAAMA,EAAW,KAAO,GAC/DJ,EAAiBpB,KAAKwB,EAAS,GAC5BZ,EAAkBE,SAASW,EAAQ,KAAOA,EAAQ,GAAK,KAAO,GACjEL,EAAiBpB,KAAKyB,EAAQ,MAG3Bb,EAAkBE,SAASU,EAAS,KAAOA,EAAS,IAAM,GAC7DJ,EAAiBpB,KAAKwB,EAAS,KAC5BZ,EAAkBE,SAASW,EAAQ,KAAOA,EAAQ,GAAK,KAC1DL,EAAiBpB,KAAKyB,EAAQ,UAKhCJ,EAAa,GAAK,MACfT,EAAkBE,SAASO,EAAa,KAC3CD,EAAiBpB,KAAKqB,EAAa,KACnCA,EAAa,IAAM,IAChBT,EAAkBE,SAASO,EAAa,KAC3CD,EAAiBpB,KAAKqB,EAAa,MAClCA,EAAa,GAAK,KAAO,IACvBT,EAAkBE,SAASO,EAAa,IAC3CD,EAAiBpB,KAAKqB,EAAa,IACnCA,EAAe,KAAO,IACnBT,EAAkBE,SAASO,EAAa,IAC3CD,EAAiBpB,KAAKqB,EAAa,IAKvCM,GAEAhB,EAAcS,EADMhB,KAAKC,MAAMD,KAAKE,SAAWc,EAAiB3B,WAY5Db,EAAM,CACVI,MA3aU,CACV,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAkapCC,aAnZmB,GAoZnB0B,cA3HoB,SAACiB,GAAgB,IAEnC5C,EAEEJ,EAFFI,MAAOC,EAELL,EAFKK,aACP2B,EACEhC,EADFgC,kBAEIiB,EAAe7C,EAAM4C,GAC3B,GAAqB,KAAjBC,EACF7C,EAAM4C,GAAc,YACjB,GAAqB,SAAjBC,EACP7C,EAAM4C,IAAe,YAClB,CACH,IAAM7C,EAAW8C,EAAaC,MAAM,GAAI,GACxC7C,EAAaF,GAAUgD,SACvB/C,EAAM4C,IAAe,OACjB3C,EAAaF,GAAUiD,SA5HJ,SAACjD,GAAc,IAEtCC,EAEEJ,EAFFI,MAAOC,EAELL,EAFKK,aACP2B,EACEhC,EADFgC,kBAEItB,EAAaZ,EAAcK,GAC3BkD,EAAajD,EAAMkD,QACvBlD,EAAMmD,MAAK,SAAAC,GAAI,OAAIA,EAAKtB,SAAL,UAAiB/B,EAAjB,UAErB,GAAoC,MAAhCE,EAAaF,GAAUI,KAAc,CACnC8C,EAAa,IAAM,IACrBjD,EAAMiD,EAAW,GAAK,YACjBrB,EAAkBE,SAASmB,EAAW,IACzCrB,EAAkBZ,KAAKiC,EAAW,GAChCA,EAAW,IAAM,IACnBjD,EAAMiD,EAAW,IAAM,YAClBrB,EAAkBE,SAASmB,EAAW,KACzCrB,EAAkBZ,KAAKiC,EAAW,KAEnCA,EAAW,EAAI,MAChBjD,EAAMiD,EAAW,GAAK,YACjBrB,EAAkBE,SAASmB,EAAW,IACzCrB,EAAkBZ,KAAKiC,EAAW,MAGnCA,EAAW3C,GAAc,IAAM,IAClCN,EAAMiD,EAAW3C,GAAc,YAC1BsB,EAAkBE,SAASmB,EAAW3C,IACzCsB,EAAkBZ,KAAKiC,EAAW3C,GAChC2C,EAAW3C,EAAW,IAAM,IAC9BN,EAAMiD,EAAW3C,EAAW,IAAM,YAC7BsB,EAAkBE,SAASmB,EAAW3C,EAAW,KACpDsB,EAAkBZ,KAAKiC,EAAW3C,EAAW,KAE7C2C,EAAW3C,EAAW,GAAK,MAC7BN,EAAMiD,EAAW3C,EAAW,IAAM,YAC7BsB,EAAkBE,SAASmB,EAAW3C,EAAW,KACpDsB,EAAkBZ,KAAKiC,EAAW3C,EAAW,MAInD,IAAK,IAAIE,EAAIyC,EAAYzC,EAAIyC,EAAa3C,EAAYE,IACpDR,EAAMQ,GAAKR,EAAMQ,GAAGsC,MAAM,GAAI,GAC9B9C,EAAMQ,IAAM,YACRA,EAAE,GAAK,MACTR,EAAMQ,EAAE,IAAM,YACToB,EAAkBE,SAAStB,EAAE,KAChCoB,EAAkBZ,KAAKR,EAAE,KAEzBA,EAAE,IAAM,IACVR,EAAMQ,EAAE,IAAM,YACToB,EAAkBE,SAAStB,EAAE,KAChCoB,EAAkBZ,KAAKR,EAAE,SAI5B,CACCyC,EAAW,IAAM,IACnBjD,EAAMiD,EAAW,IAAM,YAClBrB,EAAkBE,SAASmB,EAAW,KACzCrB,EAAkBZ,KAAKiC,EAAW,IAChCA,EAAa,IAAM,IACrBjD,EAAMiD,EAAW,IAAM,YAClBrB,EAAkBE,SAASmB,EAAW,KACzCrB,EAAkBZ,KAAKiC,EAAW,MAElCA,EAAW,GAAK,IAAM,IACxBjD,EAAMiD,EAAW,GAAK,YACjBrB,EAAkBE,SAASmB,EAAW,IACzCrB,EAAkBZ,KAAKiC,EAAW,KAGpCA,EAAuB,GAAX3C,EAAiB,MAC/BN,EAAMiD,EAAuB,GAAX3C,GAAkB,YAC/BsB,EAAkBE,SAASmB,EAAuB,GAAX3C,IAC1CsB,EAAkBZ,KAAKiC,EAAuB,GAAX3C,GACjC2C,EAAa,IAAM,IACrBjD,EAAMiD,EAAuB,GAAX3C,EAAe,GAAK,YACjCsB,EAAkBE,SAASmB,EAAuB,GAAX3C,EAAe,IACzDsB,EAAkBZ,KAAKiC,EAAuB,GAAX3C,EAAe,KAEjD2C,EAAW,GAAK,IAAM,IACzBjD,EAAMiD,EAAuB,GAAX3C,EAAe,GAAK,YACjCsB,EAAkBE,SAASmB,EAAuB,GAAX3C,EAAe,IACzDsB,EAAkBZ,KAAKiC,EAAuB,GAAX3C,EAAe,KAIxD,IAAK,IAAIE,EAAIyC,EAAYzC,EAAIyC,EAAyB,GAAX3C,EAAgBE,GAAG,GAC5DR,EAAMQ,GAAKR,EAAMQ,GAAGsC,MAAM,GAAI,GAC9B9C,EAAMQ,IAAM,aACPA,EAAE,GAAK,IAAM,IAChBR,EAAMQ,EAAE,GAAK,YACRoB,EAAkBE,SAAStB,EAAE,IAChCoB,EAAkBZ,KAAKR,EAAE,IAEzBA,EAAI,IAAM,IACZR,EAAMQ,EAAE,GAAK,YACRoB,EAAkBE,SAAStB,EAAE,IAChCoB,EAAkBZ,KAAKR,EAAE,KA0B7B6C,CAAmBtD,GACnBH,EAAI0C,cAAgB,KAGpB1C,EAAIyC,aAAeO,EACnBhD,EAAI0C,cAAgBvC,GAGxB6B,EAAkBZ,KAAK4B,GACvBhD,EAAIwC,iBAAmB,IAoGvBX,eA5UqB,SAACmB,EAAY7C,GAAc,IAI1CG,GACa,IAFfN,EADFC,aAIE,IACA,IAJAD,EADYK,aAMHF,GACXT,EAAYS,EAAUG,EAAU0C,GAClClC,KAmUA4C,iBA/PuB,WACvB/B,EAAkB,WAClBA,EAAkB,cAClBA,EAAkB,WAClBA,EAAkB,aAClBA,EAAkB,cA2PlBgC,oBAjU0B,SAACxD,UACpBH,EAAIK,aAAaF,GACxBW,KAgUAG,uBACA2C,kBA1PwB,SAACC,GAEzB,IADA,IAAIC,EAAiB,EACrB,MAA0B/C,OAAOgD,QAAQ/D,EAAIK,cAA7C,oDACW+C,QACPU,IACJ,OAAIA,GAAkB,KAElBD,GACKC,GAmPT7D,cA9ZiB,EA+ZjBF,sBACAiC,kBAxIsB,GAyItBS,aAxIEA,UAyIFD,iBAvIqB,GAwIrBE,cAzIkB,GA0IlBZ,uBACAkC,eAxBqB,WAEC,KADEhE,EAAlB0C,cAEJZ,IAEAS,MAqBJ,OAAOvC,I,kFC/bHN,EAAcC,EAAQ,GA2U5BC,EAAOC,QAzUsB,WAC3B,IAaMC,EAAgB,CACpB,QAAW,EACX,WAAc,EACd,QAAW,EACX,UAAa,EACb,UAAa,GAITC,EAAsB,kBAC1BC,EAAIC,cAAgBD,EAAIC,cAIpBC,EAAa,SAACC,GAAc,IAE9BC,EACEJ,EADFI,MAAOC,EACLL,EADKK,aAEHC,EACJD,EAAaF,GAAUI,KACnBC,EACJH,EAAaF,GAAUM,MACnBC,EACJZ,EAAcK,GAEZQ,EAAQ,EACZ,GAAiB,MAAbL,EAAkB,CAChBE,EAAY,IAAM,IACpBJ,EAAMI,EAAU,GAAK,OACW,KAA5BJ,EAAOI,EAAU,EAAG,MACtBJ,EAAOI,EAAU,EAAG,IAAM,QACI,KAA5BJ,EAAOI,EAAU,EAAG,MACtBJ,EAAOI,EAAU,EAAG,IAAM,UAEzBA,EAAYE,GAAc,IAAM,IACnCN,EAAMI,EAAYE,GAAc,OACW,KAAvCN,EAAOI,EAAYE,EAAY,MACjCN,EAAOI,EAAYE,EAAY,IAAM,QACI,KAAvCN,EAAOI,EAAYE,EAAY,MACjCN,EAAOI,EAAYE,EAAY,IAAM,SAEzC,IAAK,IAAIE,EAAIJ,EAAWI,EAAIJ,EAAYE,EAAYE,IAClDR,EAAMQ,GAAN,UAAcT,GAAd,OAAyBQ,GACrBC,EAAE,GAAK,MACTR,EAAMQ,EAAE,IAAM,QACZA,EAAE,IAAM,IACVR,EAAMQ,EAAE,IAAM,QAChBD,QAEG,CACDH,GAAa,KACfJ,EAAMI,EAAU,IAAM,OACO,IAAzBJ,EAAMI,EAAU,GAAG,KAAaA,EAAU,GAAK,IAAM,IACvDJ,EAAMI,EAAU,GAAG,GAAK,QACG,IAAzBJ,EAAMI,EAAU,GAAG,IAAYA,EAAY,IAAM,IACnDJ,EAAMI,EAAU,GAAG,GAAK,SAEvBA,EAAa,GAAKE,EAAe,MACpCN,EAAMI,EAAW,GAAKE,GAAe,OACO,IAAxCN,EAAOI,EAAW,GAAGE,EAAa,KAAaF,EAAU,GAAK,IAAM,IACtEJ,EAAOI,EAAW,GAAGE,EAAa,GAAK,QACG,IAAxCN,EAAOI,EAAW,GAAGE,EAAa,IAAYF,EAAY,IAAM,IAClEJ,EAAOI,EAAW,GAAGE,EAAa,GAAK,SAE3C,IAAK,IAAIE,EAAIJ,EAAWI,EAAIJ,EAAa,GAAKH,EAAaF,GAAUU,OAASD,GAAG,GAC/ER,EAAMQ,GAAN,UAAcT,GAAd,OAAyBQ,GACrBC,EAAI,IAAM,IACZR,EAAMQ,EAAE,GAAK,SACVA,EAAE,GAAK,IAAM,IAChBR,EAAMQ,EAAE,GAAK,QACfD,MAqCAM,EAAuB,SAACd,GAC5B,IAAMO,EAAaZ,EAAcK,GAC7Be,EAAkB,GACtB,GAAIlB,EAAIC,cACN,IAAK,IAAIW,EAAI,EAAGA,EAAIZ,EAAII,MAAMS,OAAQD,IACpC,KAAIA,EAAgB,GAAXF,EAAiB,MAEL,KAAjBV,EAAII,MAAMQ,GAAW,CAEvB,IADA,IAAID,EAAQ,EACHQ,EAAIP,EAAE,GAAIO,EAAoB,GAAdT,EAAkBE,GACpB,KAAjBZ,EAAII,MAAMe,GAD8BA,GAAG,GAE7CR,IAGAA,IAAUD,GACZQ,EAAgBE,KAAKR,SAI3B,IAAK,IAAIA,EAAI,EAAGA,EAAIZ,EAAII,MAAMS,OAAQD,IAAK,CACzC,IAAMS,EAAM,UAAMT,GAClB,GAAqB,KAAjBZ,EAAII,MAAMQ,KAAcS,EAAO,GAAK,GAAGX,GAAcW,EAAS,GAAGX,GAAa,CAEhF,IADA,IAAIC,EAAQ,EACHQ,EAAIP,EAAE,EAAGO,EAAKT,EAAYE,GACZ,KAAjBZ,EAAII,MAAMe,GADsBA,IAElCR,IAIAA,IAAUD,GACZQ,EAAgBE,KAAKR,IAI7B,OAAOM,GAWHS,EAAoB,SAACxB,GAPzBqB,KAAKE,SAAW,IACZ3B,IAQJ,IAAImB,EAAkBD,EAAqBd,GACZ,IAA3Be,EAAgBL,SAClBb,EAAID,sBACJmB,EAAkBD,EAAqBd,IAEzC,IAAMyB,EAVqB,eAACL,EAAD,uDAAO,IAAP,OAC3BC,KAAKC,MAAMD,KAAKE,SAAWH,GASPD,CAAqBJ,EAAgBL,QACzDb,EAAI6B,eAAeX,EAAgBU,GAAczB,IA4I7CH,EAAM,CACVI,MA1TU,CACV,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAiTpCC,aAlSmB,GAmSnB0B,cAxBoB,SAACiB,GAAgB,IAEnC5C,EAEEJ,EAFFI,MAAOC,EAELL,EAFKK,aACP2B,EACEhC,EADFgC,kBAEF,IAAIA,EAAkBE,SAASc,GAA/B,CACA,IAAMC,EAAe7C,EAAM4C,GAC3B,GAAqB,KAAjBC,EACF7C,EAAM4C,GAAc,YACjB,GAAqB,SAAjBC,EACP7C,EAAM4C,IAAe,YAClB,CACH,IAAM7C,EAAW8C,EAAaC,MAAM,GAAI,GACxC7C,EAAaF,GAAUgD,SACvB/C,EAAM4C,IAAe,OACjB3C,EAAaF,GAAUiD,QA1HJ,SAACjD,GAAc,IAEtCC,EAEEJ,EAFFI,MAAOC,EAELL,EAFKK,aACP2B,EACEhC,EADFgC,kBAEItB,EAAaZ,EAAcK,GAC3BkD,EAAajD,EAAMkD,QACvBlD,EAAMmD,MAAK,SAAAC,GAAI,OAAIA,EAAKtB,SAAL,UAAiB/B,EAAjB,UAErB,GAAoC,MAAhCE,EAAaF,GAAUI,KAAc,CACnC8C,EAAa,IAAM,IACrBjD,EAAMiD,EAAW,GAAK,YACjBrB,EAAkBE,SAASmB,EAAW,IACzCrB,EAAkBZ,KAAKiC,EAAW,GAChCA,EAAW,IAAM,IACnBjD,EAAMiD,EAAW,IAAM,YAClBrB,EAAkBE,SAASmB,EAAW,KACzCrB,EAAkBZ,KAAKiC,EAAW,KAEnCA,EAAW,EAAI,MAChBjD,EAAMiD,EAAW,GAAK,YACjBrB,EAAkBE,SAASmB,EAAW,IACzCrB,EAAkBZ,KAAKiC,EAAW,MAGnCA,EAAW3C,GAAc,IAAM,IAClCN,EAAMiD,EAAW3C,GAAc,YAC1BsB,EAAkBE,SAASmB,EAAW3C,IACzCsB,EAAkBZ,KAAKiC,EAAW3C,GAChC2C,EAAW3C,EAAW,IAAM,IAC9BN,EAAMiD,EAAW3C,EAAW,IAAM,YAC7BsB,EAAkBE,SAASmB,EAAW3C,EAAW,KACpDsB,EAAkBZ,KAAKiC,EAAW3C,EAAW,KAE7C2C,EAAW3C,EAAW,GAAK,MAC7BN,EAAMiD,EAAW3C,EAAW,IAAM,YAC7BsB,EAAkBE,SAASmB,EAAW3C,EAAW,KACpDsB,EAAkBZ,KAAKiC,EAAW3C,EAAW,MAInD,IAAK,IAAIE,EAAIyC,EAAYzC,EAAIyC,EAAa3C,EAAYE,IACpDR,EAAMQ,GAAKR,EAAMQ,GAAGsC,MAAM,GAAI,GAC9B9C,EAAMQ,IAAM,YACRA,EAAE,GAAK,MACTR,EAAMQ,EAAE,IAAM,YACToB,EAAkBE,SAAStB,EAAE,KAChCoB,EAAkBZ,KAAKR,EAAE,KAEzBA,EAAE,IAAM,IACVR,EAAMQ,EAAE,IAAM,YACToB,EAAkBE,SAAStB,EAAE,KAChCoB,EAAkBZ,KAAKR,EAAE,SAI5B,CACCyC,EAAW,IAAM,IACnBjD,EAAMiD,EAAW,IAAM,YAClBrB,EAAkBE,SAASmB,EAAW,KACzCrB,EAAkBZ,KAAKiC,EAAW,IAChCA,EAAa,IAAM,IACrBjD,EAAMiD,EAAW,IAAM,YAClBrB,EAAkBE,SAASmB,EAAW,KACzCrB,EAAkBZ,KAAKiC,EAAW,MAElCA,EAAW,GAAK,IAAM,IACxBjD,EAAMiD,EAAW,GAAK,YACjBrB,EAAkBE,SAASmB,EAAW,IACzCrB,EAAkBZ,KAAKiC,EAAW,KAGpCA,EAAuB,GAAX3C,EAAiB,MAC/BN,EAAMiD,EAAuB,GAAX3C,GAAkB,YAC/BsB,EAAkBE,SAASmB,EAAuB,GAAX3C,IAC1CsB,EAAkBZ,KAAKiC,EAAuB,GAAX3C,GACjC2C,EAAa,IAAM,IACrBjD,EAAMiD,EAAuB,GAAX3C,EAAe,GAAK,YACjCsB,EAAkBE,SAASmB,EAAuB,GAAX3C,EAAe,IACzDsB,EAAkBZ,KAAKiC,EAAuB,GAAX3C,EAAe,KAEjD2C,EAAW,GAAK,IAAM,IACzBjD,EAAMiD,EAAuB,GAAX3C,EAAe,GAAK,YACjCsB,EAAkBE,SAASmB,EAAuB,GAAX3C,EAAe,IACzDsB,EAAkBZ,KAAKiC,EAAuB,GAAX3C,EAAe,KAIxD,IAAK,IAAIE,EAAIyC,EAAYzC,EAAIyC,EAAyB,GAAX3C,EAAgBE,GAAG,GAC5DR,EAAMQ,GAAKR,EAAMQ,GAAGsC,MAAM,GAAI,GAC9B9C,EAAMQ,IAAM,aACPA,EAAE,GAAK,IAAM,IAChBR,EAAMQ,EAAE,GAAK,YACRoB,EAAkBE,SAAStB,EAAE,IAChCoB,EAAkBZ,KAAKR,EAAE,IAEzBA,EAAI,IAAM,IACZR,EAAMQ,EAAE,GAAK,YACRoB,EAAkBE,SAAStB,EAAE,IAChCoB,EAAkBZ,KAAKR,EAAE,KAwB7B6C,CAAmBtD,GAEvB6B,EAAkBZ,KAAK4B,KAOvBnB,eA5NqB,SAACmB,EAAY7C,GAAc,IAI1CG,GACa,IAFfN,EADFC,aAIE,IACA,IAJAD,EADYK,aAMHF,GACXT,EAAYS,EAAUG,EAAU0C,GAlBhB,WAAO,IAEvB3C,EACEL,EADFK,aACEL,EADYI,MAEV6D,SAAQ,SAAAT,GAAI,MAAW,MAC7B,cAAqBzC,OAAOC,KAAKX,GAAjC,gBAAK,IAAIF,EAAQ,KACfD,EAAWC,IAabW,IAmNA8C,kBAhNwB,WAExB,IADA,IAAIE,EAAiB,EACrB,MAA0B/C,OAAOgD,QAAQ/D,EAAIK,cAA7C,oDACW+C,QACPU,IACJ,OAAIA,GAAkB,GA4MtB7D,cA1SiB,EA2SjBF,sBACA2D,iBAhJuB,WACvB/B,EAAkB,WAClBA,EAAkB,cAClBA,EAAkB,WAClBA,EAAkB,aAClBA,EAAkB,cA4IlBV,uBACAe,kBAjCsB,IAmCxB,OAAOhC,I,oICrUHkE,EAAe,SAACV,GACpB,OAAIA,EAAKtB,SAAS,OACT,iBACLsB,EAAKtB,SAAS,aACT,uBACLsB,EAAKtB,SAAS,QACT,YACLsB,EAAKtB,SAAS,QACT,kBACI,KAATsB,GAAgBA,EAAKtB,SAAS,QAE3B,OADE,aAIEiC,EAAS,SAAC,GACkC,IADjCC,EACgC,EADhCA,YAAaC,EACmB,EADnBA,cACnCC,EAAsD,EAAtDA,gBAAiBC,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,eAelC,OACE,0BACEC,UAAU,eADZ,UAEE,6BAAKD,EAAiB,MAAQ,wCAC9B,yBAASC,UAAWD,EAAiB,aAAe,qBAApD,SAlBmB,WACrB,IAAI7D,GAAS,EAEb,OADkByD,EAAVhE,MACKsE,KAAI,SAAAlB,GAAI,OACnB,qBACEiB,UAAWP,EAAaV,GACxBmB,GAAIhE,GAAO,EACXiE,QAAS,SAAAC,GAAC,OAAIR,GAAeQ,EAAEC,OAAOH,KACtCI,aAAcT,EACdU,WAAYT,GACPU,UASJC,SCnCHhB,EAAe,SAAAV,GACnB,OAAIA,EAAKtB,SAAS,OACT,iBACLsB,EAAKtB,SAAS,aACT,uBACLsB,EAAKtB,SAAS,QACT,YACLsB,EAAKtB,SAAS,QACT,kBACF,QAGIiD,EAAW,SAAC,GAAyD,IAAxDC,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,mBAAoBb,EAAoB,EAApBA,eAc3D,OACE,0BAASC,UAAYD,EAAoC,uBAAnB,iBAAtC,UACE,0CACA,yBAASC,UAAU,qBAAnB,SAhBmB,WACrB,IAAI9D,GAAS,EACb,OAAOyE,EAAchF,MAAMsE,KAAI,SAAAlB,GAAI,OACjC,qBACEiB,UAAWP,EAAaV,GACxBmB,GAAIhE,GAAO,EACXiE,QAAS,SAAAC,GAAC,OAAIQ,GAAoBR,EAAEC,OAAOH,KAC3CW,YAAa,SAAAT,GAAC,OAAIA,EAAEC,OAAOS,MAAMC,gBAAkB,WACnDC,aAAc,SAAAZ,GAAC,OAAIA,EAAEC,OAAOS,MAAMC,gBAAkB,KAC/CP,UAQJC,SC7BIQ,EAAY,SAAC,GAEe,IAFdlB,EAEa,EAFbA,eAAgBH,EAEH,EAFGA,cACzCgB,EACsC,EADtCA,mBAAoBjB,EACkB,EADlBA,YAAagB,EACK,EADLA,cACjCd,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,gBACjB,OACE,0BAASE,UAAU,aAAnB,UACE,cAAC,EAAD,CACEL,YAAaA,EACbC,cAAeA,EACfC,gBAAiBA,EACjBC,gBAAiBA,EACjBC,eAAgBA,KACE,IAAnBA,EACG,GACA,cAAC,EAAD,CACAY,cAAeA,EACfC,mBAAoBA,EACpBb,eAAgBA,QClBpBmB,EAAe,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACrB,OACE,0BAASnB,UAAWmB,EAApB,UACE,2CACA,kEAKAC,EAAY,SAAC,GAAY,IAAXD,EAAU,EAAVA,KAClB,OACE,0BAASnB,UAAWmB,EAApB,UACE,0CACA,kEAKOE,EAAY,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UAClC,OACE,yBAASpB,QAASoB,EAAlB,SACe,aAAZD,EACG,cAAC,EAAD,CAAWH,KAAM,cACjB,cAAC,EAAD,CAAcA,KAAM,oBCvBjBK,EAAS,SAAC,GAEW,IAFVC,EAES,EAFTA,iBAAkBC,EAET,EAFSA,eAC1CC,EACiC,EADjCA,eAAgBC,EACiB,EADjBA,uBAAwBC,EACP,EADOA,aACtC9B,EAA+B,EAA/BA,eAAgBwB,EAAe,EAAfA,UAChB,OACE,mCACE,wBAAQpB,QAASJ,EAAiBwB,EAAYE,EAA9C,SACG1B,EAAiB,UAAY,eAE9BA,EAEE,GADA,yBAAQC,UAAU,kBAAkBG,QAASuB,EAA7C,mBAAoEG,EAAe,IAAM,OAE3F9B,EAEE,GADD,wBAAQC,UAAU,kBAAkBG,QAASwB,EAA7C,yBAED5B,EAEE,GADD,wBAAQI,QAASyB,EAAjB,8BCfIE,EAAS,WACpB,OACE,iCACE,yDACE,mBAAGC,KAAK,kCAAkC1B,OAAO,SAAjD,gCADF,yCCCA2B,G,MAAqB9G,EAAQ,KAC7B+G,EAAuB/G,EAAQ,IAE/BgH,EAAc,CAClBC,EAAG,UACHC,EAAG,aACHC,EAAG,UACHC,EAAG,YACHC,EAAG,aAGCC,EAAgB,CACpBL,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAGQE,EAAM,WAAO,IAAD,EACiBC,oBAAS,kBAAMV,OADhC,mBACfrC,EADe,KACFgD,EADE,OAEqBD,oBAAS,kBAAMT,OAFpC,mBAEftB,EAFe,KAEAiC,EAFA,OAGGF,oBAAS,iBAAM,YAHlB,mBAGfG,EAHe,KAGTC,EAHS,OAIuBJ,oBAAS,kBAAM,KAJtC,mBAIf3C,EAJe,KAICgD,EAJD,OAKmBL,oBAAS,kBAAM,KALlC,mBAKfb,EALe,KAKDmB,EALC,OAMSN,oBAAS,iBAAM,MANxB,mBAMfpB,EANe,KAMN2B,EANM,OAOaP,oBAAS,kBAAM,KAP5B,mBAOfQ,EAPe,KAOJC,EAPI,OAQyBT,oBAAS,iBAAM,MARxC,mBAQfjG,EARe,KAQE2G,EARF,KAUvBC,qBAAU,WACc1D,EAAYR,qBAEhCmE,YAAW,kBAAML,EAAW,YAAW,OACxC,CAACtD,IAEJ0D,qBAAU,WACgB1C,EAAcxB,qBAEpCmE,YAAW,kBAAML,EAAW,cAAa,OAC1C,CAACtC,IAEJ0C,qBAAU,YACe,IAAnBtD,GACFwD,MACD,CAACxD,IAEJsD,qBAAU,WACR,IAAMG,EACJ7D,EAAYR,oBACRsE,EACJ9C,EAAcxB,oBACH,aAAT0D,GAAwBY,GAAoBD,GAC9CF,WAAWI,EAAsB,OAClC,CAACb,IAEJQ,qBAAU,WACR,IAAM3H,EACJwG,EAAYgB,GACRS,EACJhE,EAAYnD,qBAAqBd,GACnC0H,EAAmBO,KAClB,CAACT,EAAWrB,IAEf,IAKMN,EAAY,WAChBwB,GAAkB,GAClBJ,GAAe,kBAAMX,OACrBY,GAAiB,kBAAMX,OACvBe,GAAgB,GAChBG,EAAa,GACbF,EAAW,IACXH,EAAQ,WAGJc,EAAa,kBAEbd,EADK,WAATD,EACY,WACA,WASRgB,EAAmB,SAAC7H,GAAD,OACvBS,EAAgBgB,SAASzB,IAqErBuH,EAAoB,WACxB,IAAMO,EAAS,eAAOnD,GACtBmD,EAAU7E,mBACV2D,EAAiBkB,IAoBbJ,EAAuB,WAC3BE,IACA,IAAIE,EAAS,eAAOnE,GACpBmE,EAAUvE,iBACVoD,EAAemB,IAGjB,OACE,0BAAS9D,UAAU,MAAnB,UACe,KAAZsB,EACE,cAAC,EAAD,CACCG,iBAnIiB,WACnByB,GAAa,IAAMnD,GACrBgD,GAAmBhD,IAkIfwB,UAAWA,EACXG,eAjHe,WACrBsB,GAAiBnB,GACjB,IAAIiC,EAAS,eAAOnE,GACpBmE,EAAUxI,sBACVqH,EAAemB,IA8GTjC,aAAcA,EACdF,eA/Ce,WACrB,KAAIuB,GAAa,GAAjB,CACA,IAAMY,EAAS,eAAOnE,GAChBoE,EAAe7B,EAAYgB,EAAU,GAC3CY,EAAU5E,oBAAoB6E,GAC9BpB,EAAemB,GACfX,GAAa,SAAAa,GAAS,OAAIA,EAAU,OA0C9BpC,uBAjGuB,WAC7B,IAAMkC,EAAS,eAAOnE,GACtBmE,EAAU7E,mBACgC,MAA1C6E,EAAUlI,aAAaqI,UAAUnI,KAC7BkH,GAAgB,GAChBA,GAAgB,GACpBL,EAAemB,GACfX,EAAa,IA2FPpD,eAAgBA,IAChB,GAES,KAAZuB,EACG,cAAC,EAAD,CACEvB,eAAgBA,EAChBH,cAjHY,SAAA5D,GACpB,IAAuB,IAAnB+D,GACC8D,EAAiB7H,GAAtB,CACA,IAAM8H,EAAS,eAAOnE,GACtBmE,EAAU1G,eAAepB,EAAQkG,EAAYgB,IAC7CP,EAAemB,GACfX,GAAa,SAAAa,GAAS,OAAIA,EAAW,OA4G7BpD,mBAzCiB,SAAA5E,GACzB,GAAa,aAAT6G,IAEFlD,EAAYR,oBACd,CACA,IAAI2E,EAAS,eAAOnD,GACZhF,EAAUmI,EAAVnI,MACJA,EAAMK,GAAOyB,SAAS,SACrB9B,EAAMK,GAAOyB,SAAS,SACtB9B,EAAMK,GAAOyB,SAAS,cACtB9B,EAAMK,GAAOyB,SAAS,SAE3BmG,IACAE,EAAUxG,cAActB,GACxB4G,EAAiBkB,MA4BTnE,YAAaA,EACbgB,cAAeA,EACfd,gBAlGc,SAACO,GACvB,KAAI8C,GAAa,GAAjB,CACA,IAAMlH,GAASoE,EAAEC,OAAOH,GACxB,GAAK2D,EAAiB7H,GAAtB,CAIA,IAAMC,EAAauG,EAAcU,GAAW,EAC5C,GAAIrB,EACF,IAAK,IAAI1F,EAAIH,EAAOG,GAAKH,EAAkB,GAAXC,EAAgBE,GAAG,GACjD+H,SAASC,eAAT,UAA2BhI,IACxB2E,MAAMC,gBAAkB,eAE7B,IAAK,IAAI5E,EAAIH,EAAOG,GAAKH,EAAMC,EAAYE,IACzC+H,SAASC,eAAT,UAA2BhI,IACxB2E,MAAMC,gBAAkB,eAX7BX,EAAEC,OAAOS,MAAMC,gBAAkB,QA+F3BjB,gBAjFc,SAACM,GACvB,KAAI8C,GAAa,GAAjB,CACA,IAAMlH,GAASoE,EAAEC,OAAOH,GACxB,GAAK2D,EAAiB7H,GAAtB,CAOA,IAAMC,EAAauG,EAAcU,GAAW,EAC5C,GAAIrB,EACF,IAAK,IAAI1F,EAAIH,EAAOG,GAAKH,EAAkB,GAAXC,EAAgBE,GAAG,GACjD+H,SAASC,eAAT,UAA2BhI,IACxB2E,MAAMC,gBAAkB,uBAE7B,IAAK,IAAI5E,EAAIH,EAAOG,GAAKH,EAAMC,EAAYE,IACzC+H,SAASC,eAAT,UAA2BhI,IACxB2E,MAAMC,gBAAkB,uBAdzBpB,EAAYhE,MAAMK,GAAOI,QAAU,EACrCgE,EAAEC,OAAOS,MAAMC,gBAAkB,kBAEjCX,EAAEC,OAAOS,MAAMC,gBAAkB,cA4E/B,cAAC,EAAD,CACEO,QAASA,EACTC,UAAWA,IAEJ,KAAZD,EACE,cAAC,EAAD,IACC,OC7NV8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFJ,SAASC,eAAe,U,gBCR1B,IAAMI,EAAiB,CACrB,QAAW,EACX,WAAc,EACd,QAAW,EACX,UAAa,EACb,UAAa,GAkBfpJ,EAAOC,QAfa,SAACM,EAAUI,EAAME,GACnC,IAAMI,EAASmI,EAAe7I,GAUxBH,EAAM,CAAEG,WAAUU,SAAQJ,QAAOkC,KAT5B,EASkCpC,OAAM6C,QARtC,EAQ8CD,OAJ5C,WACbnD,EAAI2C,OAHA3C,EAAI2C,MAAQ9B,IAAQb,EAAIoD,QAAS,KAOvC,OAAOpD,K","file":"static/js/main.329ed3b0.chunk.js","sourcesContent":["const shipFactory = require('../ship_factory/ship_factory');\n\nconst playerBoardFactory = () => {\n  let board = [\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n  ]\n  \n  const lengthMapping = {\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"Cruiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n  }\n  \n  let verticalShip = false;\n  const changeShipDirection = () => \n    obj.verticalShip = !obj.verticalShip;\n\n  const shipsOnBoard = {};\n\n  const appendShip = (shipName) => {\n    const { \n      board, shipsOnBoard \n    } = obj;\n    const shipAxis = \n      shipsOnBoard[shipName].axis;\n    const tileStart = \n      shipsOnBoard[shipName].index;\n    const shipLength = \n      lengthMapping[shipName];\n\n    let count = 1;\n    if (shipAxis === \"X\") {\n      if (tileStart % 10 != 0) {\n        board[tileStart-1] = \"null\";\n        if (board[(tileStart-1)+10] === \"\")\n          board[(tileStart-1)+10] = \"null\";\n        if (board[(tileStart-1)-10] === \"\")\n          board[(tileStart-1)-10] = \"null\";\n      }\n      if ((tileStart + shipLength) % 10 != 0) {\n        board[tileStart + shipLength] = \"null\";\n        if (board[(tileStart + shipLength)+10] === \"\")\n          board[(tileStart + shipLength)+10] = \"null\";\n        if (board[(tileStart + shipLength)-10] === \"\")\n          board[(tileStart + shipLength)-10] = \"null\";\n      }\n      for (let i = tileStart; i < tileStart + shipLength; i++) {\n        board[i] = `${shipName}${count}`;\n        if (i+10 < 100)\n          board[i+10] = \"null\";\n        if (i-10 > -1)\n          board[i-10] = \"null\";\n        count++;\n      }\n    } else {\n      if (tileStart >= 10) {\n        board[tileStart-10] = \"null\";\n        if (board[tileStart-10+1] == \"\" && (tileStart-9) % 10 != 0)\n          board[tileStart-10+1] = \"null\";\n        if (board[tileStart-10-1] == \"\" && tileStart % 10 != 0)\n          board[tileStart-10-1] = \"null\";\n      }\n      if ((tileStart + (10 * shipLength)) < 100) {\n        board[tileStart+(10 * shipLength)] = \"null\";\n        if (board[(tileStart+(10*shipLength))+1] == \"\" && (tileStart-9) % 10 != 0)\n          board[(tileStart+(10*shipLength))+1] = \"null\";\n        if (board[(tileStart+(10*shipLength))-1] == \"\" && tileStart % 10 != 0)\n          board[(tileStart+(10*shipLength))-1] = \"null\";\n      }\n      for (let i = tileStart; i < tileStart + (10 * shipsOnBoard[shipName].length); i+=10) {\n        board[i] = `${shipName}${count}`;\n        if (i % 10 != 0)\n          board[i-1] = \"null\";\n        if ((i-9) % 10 != 0)\n          board[i+1] = \"null\";\n        count++;\n      }\n    }\n  }\n\n  const updateBoard = () => {\n    const { \n      shipsOnBoard, board \n    } = obj;\n    for (let i = 0; i < board.length; i++)\n      board[i] = '';\n    for (let shipName of Object.keys(shipsOnBoard)) \n      appendShip(shipName);\n  }\n\n  const addShipToBoard = (coordinate, shipName) => {\n    const {\n      verticalShip, shipsOnBoard\n    } = obj;\n    const shipAxis = \n      verticalShip === false\n      ? \"X\"\n      : \"Y\";\n    shipsOnBoard[shipName] = \n      shipFactory(shipName, shipAxis, coordinate);\n    updateBoard();\n  }\n\n  const removeShipFromBoard = (shipName) => {\n    delete obj.shipsOnBoard[shipName];\n    updateBoard();\n  }\n\n  const checkAvailableSpaces = (shipName) => {\n    const {\n      board, verticalShip\n    } = obj;\n    const shipLength = lengthMapping[shipName];\n    let availableSpaces = [];\n    if (verticalShip) \n      for (let i = 0; i < board.length; i++) {\n        if (i + (shipLength*10) > 109)\n          continue\n        if (board[i] === \"\") {\n          let count = 1;\n          for (let j = i+10; j < ((shipLength) * 10)+i; j+=10) {\n            if (board[j] === \"\") \n              count++;\n            else break;\n          }\n          if (count === shipLength)\n            availableSpaces.push(i);\n        }\n      }\n    else {\n      for (let i = 0; i < 100; i++) {\n        const strNum = `${i}`;\n        if (board[i] === \"\" && (strNum[1] < 11-shipLength || strNum < 11-shipLength)) {\n          let count = 1;\n          for (let j = i+1; j < (shipLength)+i; j++) {\n            if (board[j] === \"\") {\n              count++;\n            }\n            else break;\n          }\n          if (count === shipLength)\n            availableSpaces.push(i);\n        }\n      }\n    }\n    return availableSpaces;\n  }\n\n  const changeDirectionRandomly = () => \n    Math.random() > 0.5\n      ? changeShipDirection()\n      : \"\";\n\n  const pickRandomCoordinate = (num = 100) => \n    Math.floor(Math.random() * num);\n\n  const addIndividualShip = (shipName) => {\n    changeDirectionRandomly();\n    let availableSpaces = checkAvailableSpaces(shipName);\n    if (availableSpaces.length === 0) {\n      obj.changeShipDirection();\n      availableSpaces = checkAvailableSpaces(shipName);\n    }\n    const randomIndex = pickRandomCoordinate(availableSpaces.length);\n    obj.addShipToBoard(availableSpaces[randomIndex], shipName);\n  }\n\n\n  const randomlyAddShips = () => {\n    addIndividualShip(\"Carrier\");\n    addIndividualShip(\"Battleship\");\n    addIndividualShip(\"Cruiser\");\n    addIndividualShip(\"Submarine\");\n    addIndividualShip(\"Destroyer\");\n  }\n\n  const checkingForDefeat = (returnCount) => {\n    let sunkShipsCount = 0;\n    for (const [key, ship] of Object.entries(obj.shipsOnBoard)) \n      if (ship.isSunk) \n        sunkShipsCount++;\n    if (sunkShipsCount >= 5) \n      return true;\n    if (returnCount)\n      return sunkShipsCount;\n    return false;\n  }\n\n  const setShipAsDestroyed = (shipName) => {\n    let {\n      board, shipsOnBoard,\n      attackedPositions\n    } = obj;\n    const shipLength = lengthMapping[shipName];\n    const startIndex = board.indexOf(\n      board.find(tile => tile.includes(`${shipName}1`))\n    );\n    if (shipsOnBoard[shipName].axis === \"X\") {\n      if (startIndex % 10 != 0) {\n        board[startIndex-1] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex-1))\n          attackedPositions.push(startIndex-1);\n        if (startIndex-11 >= 0) {\n          board[startIndex-11] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-11))\n            attackedPositions.push(startIndex-11);\n        }\n        if(startIndex+9 < 100) {\n          board[startIndex+9] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex+9))\n            attackedPositions.push(startIndex+9);\n        }\n      }\n      if ((startIndex+shipLength) % 10 != 0) {\n        board[startIndex+shipLength] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex+shipLength))\n          attackedPositions.push(startIndex+shipLength);\n        if (startIndex+shipLength-10 >= 0) {\n          board[startIndex+shipLength-10] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+shipLength-10))\n            attackedPositions.push(startIndex+shipLength-10);\n        }\n        if (startIndex+shipLength+10 < 100) {\n          board[startIndex+shipLength+10] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+shipLength+10))\n            attackedPositions.push(startIndex+shipLength+10);\n        }\n      }\n\n      for (let i = startIndex; i < startIndex + shipLength; i++) {\n        board[i] = board[i].slice(0, -3);\n        board[i] += \"destroyed\";\n        if (i+10 < 100) {\n          board[i+10] = \"null-sunk\";\n          if (!attackedPositions.includes(i+10))\n            attackedPositions.push(i+10);\n        }\n        if (i-10 >= 0) {\n          board[i-10] = \"null-sunk\";\n          if (!attackedPositions.includes(i-10))\n            attackedPositions.push(i-10);\n        }\n      }\n    }\n    else {\n      if (startIndex-10 >= 0) {\n        board[startIndex-10] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex-10))\n          attackedPositions.push(startIndex-10);\n        if (startIndex % 10 != 0) {\n          board[startIndex-11] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-11))\n            attackedPositions.push(startIndex-11);\n        }\n        if((startIndex-9) % 10 != 0) {\n          board[startIndex-9] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-9))\n            attackedPositions.push(startIndex-9);\n        }\n      }\n      if (startIndex+(shipLength*10) < 100) {\n        board[startIndex+(shipLength*10)] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex+(shipLength*10)))\n          attackedPositions.push(startIndex+(shipLength*10));\n        if (startIndex % 10 != 0) {\n          board[startIndex+(shipLength*10)-1] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+(shipLength*10)-1))\n            attackedPositions.push(startIndex+(shipLength*10)-1);\n        }\n        if ((startIndex-9) % 10 != 0) {\n          board[startIndex+(shipLength*10)+1] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+(shipLength*10)+1))\n            attackedPositions.push(startIndex+(shipLength*10)+1);\n        }\n      }\n\n      for (let i = startIndex; i < startIndex + (shipLength*10); i+=10) {\n        board[i] = board[i].slice(0, -3);\n        board[i] += \"destroyed\";\n        if ((i-9) % 10 != 0) {\n          board[i+1] = \"null-sunk\";\n          if (!attackedPositions.includes(i+1))\n            attackedPositions.push(i+1);\n        }\n        if (i % 10 != 0) {\n          board[i-1] = \"null-sunk\";\n          if (!attackedPositions.includes(i-1))\n            attackedPositions.push(i-1);\n        }\n      }\n    }\n  }\n\n  let attackedPositions = [];\n  let lastHitIndex;\n  let shipToDestroy = \"\";\n  let posiblePositions = [];\n\n  const recieveAttack = (coordinate) => {\n    let { \n      board, shipsOnBoard,\n      attackedPositions\n    } = obj;\n    const tileAttacked = board[coordinate];\n    if (tileAttacked === '') \n      board[coordinate] = 'miss';  \n    else if (tileAttacked === 'null') \n      board[coordinate] += '-miss';\n    else {\n      const shipName = tileAttacked.slice(0, -1);\n      shipsOnBoard[shipName].addHit();\n      board[coordinate] += '-hit';\n      if (shipsOnBoard[shipName].isSunk) {\n        setShipAsDestroyed(shipName);\n        obj.shipToDestroy = \"\";\n      }\n      else {\n        obj.lastHitIndex = coordinate;\n        obj.shipToDestroy = shipName;\n      }\n    }\n    attackedPositions.push(coordinate);\n    obj.posiblePositions = [];\n  }\n\n  const checkImposiblePositions = () => {\n    const { attackedPositions } = obj;\n    const imposiblePositions = [];\n    for (let i = 0; i < 100; i++) {\n      if (attackedPositions.includes(i)) \n        continue;\n      let count = 0;\n      if (i % 10 === 0 || attackedPositions.includes(i-1))\n        count++;\n      if ((i-9) % 10 === 0 || attackedPositions.includes(i+1))\n        count++;\n      if (i-10 < 0 || attackedPositions.includes(i-10))\n        count++;\n      if (i+10 > 100 || attackedPositions.includes(i+10))\n        count++;\n      if (count >= 4)\n        imposiblePositions.push(i);\n    }\n    return imposiblePositions;\n  }\n\n  const computerRandomAttack = () => {\n    let { \n      recieveAttack, attackedPositions,\n    } = obj;\n    const imposiblePositions = checkImposiblePositions();\n    console.log(imposiblePositions);\n    let newCoordinate = \n      pickRandomCoordinate();\n    while (attackedPositions.includes(newCoordinate) || imposiblePositions.includes(newCoordinate)) \n      newCoordinate  = pickRandomCoordinate();\n    recieveAttack(newCoordinate);\n  }\n\n  const checkPositionsBeforeAttack = () => {\n    let { board, lastHitIndex,\n      shipToDestroy, shipsOnBoard,\n      attackedPositions, posiblePositions\n    } = obj;\n\n    if (shipsOnBoard[shipToDestroy].hits > 1) {\n      let firstHit;\n      let lastHit;\n      for (let i = 0; firstHit === undefined; i++)\n        if ( board[i].includes(shipToDestroy) && board[i].includes('hit'))\n          firstHit = i;\n      for (let i = 99; lastHit === undefined; i--)\n        if (board[i].includes(shipToDestroy) && board[i].includes('hit'))\n          lastHit = i;\n      if (shipsOnBoard[shipToDestroy].axis == \"X\") {\n        if (!attackedPositions.includes(firstHit-1) && firstHit % 10 !== 0)\n          posiblePositions.push(firstHit-1);\n        if (!attackedPositions.includes(lastHit+1) && (lastHit-9) % 10 !== 0)\n          posiblePositions.push(lastHit+1);\n      }\n      else {\n        if (!attackedPositions.includes(firstHit-10) && firstHit-10 > -1)\n          posiblePositions.push(firstHit-10);\n        if (!attackedPositions.includes(lastHit+10) && lastHit+10 < 100)\n          posiblePositions.push(lastHit+10);\n      }\n      return;\n    }\n\n    if (lastHitIndex+10 < 100)\n      if (!attackedPositions.includes(lastHitIndex+10)) \n        posiblePositions.push(lastHitIndex+10);\n    if (lastHitIndex-10 >= 0)\n      if (!attackedPositions.includes(lastHitIndex-10)) \n        posiblePositions.push(lastHitIndex-10);\n    if ((lastHitIndex-9) % 10 !== 0)\n      if (!attackedPositions.includes(lastHitIndex+1)) \n        posiblePositions.push(lastHitIndex+1);\n    if (lastHitIndex % 10 !== 0)\n      if (!attackedPositions.includes(lastHitIndex-1)) \n        posiblePositions.push(lastHitIndex-1);\n  }\n\n  const computerSentientAttack = () => {\n    let { recieveAttack, posiblePositions } = obj;\n    checkPositionsBeforeAttack();\n    const randomIndex = Math.floor(Math.random() * posiblePositions.length);\n    recieveAttack(posiblePositions[randomIndex]);\n  }\n\n  const computerAttack = () => {\n    let { shipToDestroy } = obj;\n    if (shipToDestroy === \"\") \n      computerRandomAttack();\n    else \n      computerSentientAttack();\n  }\n\n  const obj = { \n    board, \n    shipsOnBoard, \n    recieveAttack,\n    addShipToBoard,\n    randomlyAddShips,\n    removeShipFromBoard,\n    checkAvailableSpaces,\n    checkingForDefeat,\n    verticalShip,\n    changeShipDirection,\n    attackedPositions,\n    lastHitIndex,\n    posiblePositions,\n    shipToDestroy,\n    computerRandomAttack,\n    computerAttack\n  };\n  return obj;\n}\n\nmodule.exports = playerBoardFactory;\n","const shipFactory = require('../ship_factory/ship_factory');\n\nconst computerBoardFactory = () => {\n  let board = [\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '',\n  ]\n  \n  const lengthMapping = {\n    \"Carrier\": 5,\n    \"Battleship\": 4,\n    \"Cruiser\": 3,\n    \"Submarine\": 3,\n    \"Destroyer\": 2,\n  }\n\n  let verticalShip = false;\n  const changeShipDirection = () => \n    obj.verticalShip = !obj.verticalShip;\n\n  const shipsOnBoard = {};\n\n  const appendShip = (shipName) => {\n    const { \n      board, shipsOnBoard \n    } = obj;\n    const shipAxis = \n      shipsOnBoard[shipName].axis;\n    const tileStart = \n      shipsOnBoard[shipName].index;\n    const shipLength = \n      lengthMapping[shipName];\n\n    let count = 1;\n    if (shipAxis === \"X\") {\n      if (tileStart % 10 != 0) {\n        board[tileStart-1] = \"null\";\n        if (board[(tileStart-1)+10] === \"\")\n          board[(tileStart-1)+10] = \"null\";\n        if (board[(tileStart-1)-10] === \"\")\n          board[(tileStart-1)-10] = \"null\";\n      }\n      if ((tileStart + shipLength) % 10 != 0) {\n        board[tileStart + shipLength] = \"null\";\n        if (board[(tileStart + shipLength)+10] === \"\")\n          board[(tileStart + shipLength)+10] = \"null\";\n        if (board[(tileStart + shipLength)-10] === \"\")\n          board[(tileStart + shipLength)-10] = \"null\";\n      }\n      for (let i = tileStart; i < tileStart + shipLength; i++) {\n        board[i] = `${shipName}${count}`;\n        if (i+10 < 100)\n          board[i+10] = \"null\";\n        if (i-10 > -1)\n          board[i-10] = \"null\";\n        count++;\n      }\n    } else {\n      if (tileStart >= 10) {\n        board[tileStart-10] = \"null\";\n        if (board[tileStart-10+1] == \"\" && (tileStart-9) % 10 != 0)\n          board[tileStart-10+1] = \"null\";\n        if (board[tileStart-10-1] == \"\" && tileStart % 10 != 0)\n          board[tileStart-10-1] = \"null\";\n      }\n      if ((tileStart + (10 * shipLength)) < 100) {\n        board[tileStart+(10 * shipLength)] = \"null\";\n        if (board[(tileStart+(10*shipLength))+1] == \"\" && (tileStart-9) % 10 != 0)\n          board[(tileStart+(10*shipLength))+1] = \"null\";\n        if (board[(tileStart+(10*shipLength))-1] == \"\" && tileStart % 10 != 0)\n          board[(tileStart+(10*shipLength))-1] = \"null\";\n      }\n      for (let i = tileStart; i < tileStart + (10 * shipsOnBoard[shipName].length); i+=10) {\n        board[i] = `${shipName}${count}`;\n        if (i % 10 != 0)\n          board[i-1] = \"null\";\n        if ((i-9) % 10 != 0)\n          board[i+1] = \"null\";\n        count++;\n      }\n    }\n  }\n\n  const updateBoard = () => {\n    const { \n      shipsOnBoard, board \n    } = obj;\n    board.forEach(tile => tile = '');\n    for (let shipName of Object.keys(shipsOnBoard)) \n      appendShip(shipName);\n  }\n\n  const addShipToBoard = (coordinate, shipName) => {\n    const {\n      verticalShip, shipsOnBoard\n    } = obj;\n    const shipAxis = \n      verticalShip === false\n      ? \"X\"\n      : \"Y\";\n    shipsOnBoard[shipName] = \n      shipFactory(shipName, shipAxis, coordinate);\n    updateBoard();\n  }\n\n  const checkingForDefeat = () => {\n    let sunkShipsCount = 0;\n    for (const [key, ship] of Object.entries(obj.shipsOnBoard)) \n      if (ship.isSunk) \n        sunkShipsCount++;\n    if (sunkShipsCount >= 5) \n      return true;\n    return false;\n  }\n\n  const checkAvailableSpaces = (shipName) => {\n    const shipLength = lengthMapping[shipName];\n    let availableSpaces = [];\n    if (obj.verticalShip) \n      for (let i = 0; i < obj.board.length; i++) {\n        if (i + (shipLength*10) > 109)\n          continue\n        if (obj.board[i] === \"\") {\n          let count = 1;\n          for (let j = i+10; j < ((shipLength) * 10)+i; j+=10) {\n            if (obj.board[j] === \"\") \n              count++;\n            else break;\n          }\n          if (count === shipLength)\n            availableSpaces.push(i);\n        }\n      }\n    else {\n      for (let i = 0; i < obj.board.length; i++) {\n        const strNum = `${i}`;\n        if (obj.board[i] === \"\" && (strNum[1] < 11-shipLength || strNum < 11-shipLength)) {\n          let count = 1;\n          for (let j = i+1; j < (shipLength)+i; j++) {\n            if (obj.board[j] === \"\") {\n              count++;\n            }\n            else break;\n          }\n          if (count === shipLength)\n            availableSpaces.push(i);\n        }\n      }\n    }\n    return availableSpaces;\n  }\n\n  const changeDirectionRandomly = () => \n    Math.random() > 0.5\n      ? changeShipDirection()\n      : \"\";\n\n  const pickRandomCoordinate = (num = 100) => \n    Math.floor(Math.random() * num);\n\n  const addIndividualShip = (shipName) => {\n    changeDirectionRandomly();\n    let availableSpaces = checkAvailableSpaces(shipName);\n    if (availableSpaces.length === 0) {\n      obj.changeShipDirection();\n      availableSpaces = checkAvailableSpaces(shipName);\n    }\n    const randomIndex = pickRandomCoordinate(availableSpaces.length);\n    obj.addShipToBoard(availableSpaces[randomIndex], shipName);\n  }\n\n\n  const randomlyAddShips = () => {\n    addIndividualShip(\"Carrier\");\n    addIndividualShip(\"Battleship\");\n    addIndividualShip(\"Cruiser\");\n    addIndividualShip(\"Submarine\");\n    addIndividualShip(\"Destroyer\");\n  }\n\n  const setShipAsDestroyed = (shipName) => {\n    let {\n      board, shipsOnBoard,\n      attackedPositions\n    } = obj;\n    const shipLength = lengthMapping[shipName];\n    const startIndex = board.indexOf(\n      board.find(tile => tile.includes(`${shipName}1`))\n    );\n    if (shipsOnBoard[shipName].axis === \"X\") {\n      if (startIndex % 10 != 0) {\n        board[startIndex-1] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex-1))\n          attackedPositions.push(startIndex-1);\n        if (startIndex-11 >= 0) {\n          board[startIndex-11] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-11))\n            attackedPositions.push(startIndex-11);\n        }\n        if(startIndex+9 < 100) {\n          board[startIndex+9] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex+9))\n            attackedPositions.push(startIndex+9);\n        }\n      }\n      if ((startIndex+shipLength) % 10 != 0) {\n        board[startIndex+shipLength] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex+shipLength))\n          attackedPositions.push(startIndex+shipLength);\n        if (startIndex+shipLength-10 >= 0) {\n          board[startIndex+shipLength-10] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+shipLength-10))\n            attackedPositions.push(startIndex+shipLength-10);\n        }\n        if (startIndex+shipLength+10 < 100) {\n          board[startIndex+shipLength+10] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+shipLength+10))\n            attackedPositions.push(startIndex+shipLength+10);\n        }\n      }\n\n      for (let i = startIndex; i < startIndex + shipLength; i++) {\n        board[i] = board[i].slice(0, -3);\n        board[i] += \"destroyed\";\n        if (i+10 < 100) {\n          board[i+10] = \"null-sunk\";\n          if (!attackedPositions.includes(i+10))\n            attackedPositions.push(i+10);\n        }\n        if (i-10 >= 0) {\n          board[i-10] = \"null-sunk\";\n          if (!attackedPositions.includes(i-10))\n            attackedPositions.push(i-10);\n        }\n      }\n    }\n    else {\n      if (startIndex-10 >= 0) {\n        board[startIndex-10] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex-10))\n          attackedPositions.push(startIndex-10);\n        if (startIndex % 10 != 0) {\n          board[startIndex-11] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-11))\n            attackedPositions.push(startIndex-11);\n        }\n        if((startIndex-9) % 10 != 0) {\n          board[startIndex-9] = \"null-sunk\";\n          if (!attackedPositions.includes(startIndex-9))\n            attackedPositions.push(startIndex-9);\n        }\n      }\n      if (startIndex+(shipLength*10) < 100) {\n        board[startIndex+(shipLength*10)] = \"null-sunk\";\n        if (!attackedPositions.includes(startIndex+(shipLength*10)))\n          attackedPositions.push(startIndex+(shipLength*10));\n        if (startIndex % 10 != 0) {\n          board[startIndex+(shipLength*10)-1] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+(shipLength*10)-1))\n            attackedPositions.push(startIndex+(shipLength*10)-1);\n        }\n        if ((startIndex-9) % 10 != 0) {\n          board[startIndex+(shipLength*10)+1] = \"null-sunk\"\n          if (!attackedPositions.includes(startIndex+(shipLength*10)+1))\n            attackedPositions.push(startIndex+(shipLength*10)+1);\n        }\n      }\n\n      for (let i = startIndex; i < startIndex + (shipLength*10); i+=10) {\n        board[i] = board[i].slice(0, -3);\n        board[i] += \"destroyed\";\n        if ((i-9) % 10 != 0) {\n          board[i+1] = \"null-sunk\";\n          if (!attackedPositions.includes(i+1))\n            attackedPositions.push(i+1);\n        }\n        if (i % 10 != 0) {\n          board[i-1] = \"null-sunk\";\n          if (!attackedPositions.includes(i-1))\n            attackedPositions.push(i-1);\n        }\n      }\n    }\n  }\n\n  let attackedPositions = [];\n\n  const recieveAttack = (coordinate) => {\n    let { \n      board, shipsOnBoard,\n      attackedPositions\n    } = obj;\n    if (attackedPositions.includes(coordinate)) return;\n    const tileAttacked = board[coordinate];\n    if (tileAttacked === '') \n      board[coordinate] = 'miss';  \n    else if (tileAttacked === 'null') \n      board[coordinate] += '-miss';\n    else {\n      const shipName = tileAttacked.slice(0, -1);\n      shipsOnBoard[shipName].addHit();\n      board[coordinate] += '-hit';\n      if (shipsOnBoard[shipName].isSunk) \n        setShipAsDestroyed(shipName);\n    }\n    attackedPositions.push(coordinate);\n  }\n\n  const obj = { \n    board, \n    shipsOnBoard, \n    recieveAttack,\n    addShipToBoard,\n    checkingForDefeat,\n    verticalShip,\n    changeShipDirection,\n    randomlyAddShips,\n    checkAvailableSpaces,\n    attackedPositions,\n  };\n  return obj;\n}\n\nmodule.exports = computerBoardFactory;\n","import React from \"react\"\nimport uniqid from \"uniqid\";\n\nconst classMapping = (tile) => {\n  if (tile.includes(\"hit\")) \n    return \"tile ship--hit\";\n  if (tile.includes(\"destroyed\"))\n    return \"tile ship--destroyed\";\n  if (tile.includes(\"miss\"))\n    return \"tile miss\";\n  if (tile.includes(\"sunk\"))\n    return \"tile ship--sunk\";\n  if (tile !== \"\" && !tile.includes(\"null\")) \n    return \"tile ship\"\n  return \"tile\";\n}\n\nexport const Player = ({playerBoard, addPlayerShip, \n  showShipPreview, hideShipPreview, hasGameStarted}) => {\n  const appendingTiles = () => {\n    let count = -1;\n    const { board } = playerBoard;\n    return board.map(tile => \n      <div \n        className={classMapping(tile)}\n        id={count+=1}\n        onClick={e => addPlayerShip(+e.target.id)}\n        onMouseEnter={showShipPreview}\n        onMouseOut={hideShipPreview}\n        key={uniqid()}>\n      </div>)\n  }\n\n  return(\n    <section \n      className=\"player-board\">\n      <h1>{hasGameStarted ? 'You' : 'Place your ships, ready for battle!'}</h1>\n      <section className={hasGameStarted ? \"board-grid\" : \"board-grid --hover\"}>\n        {appendingTiles()}\n      </section>\n    </section>\n    )\n}\n","import React from \"react\";\nimport uniqid from \"uniqid\";\n\nconst classMapping = tile => {\n  if (tile.includes(\"hit\")) \n    return \"tile ship--hit\";\n  if (tile.includes(\"destroyed\"))\n    return \"tile ship--destroyed\";\n  if (tile.includes(\"miss\"))\n    return \"tile miss\";\n  if (tile.includes(\"sunk\")) \n    return \"tile ship--sunk\";\n  return \"tile\";\n}\n\nexport const Computer = ({computerBoard, handlePlayerAttack, hasGameStarted}) => {\n  const appendingTiles = () => {\n    let count = -1;\n    return computerBoard.board.map(tile => \n      <div \n        className={classMapping(tile)}\n        id={count+=1}\n        onClick={e => handlePlayerAttack(+e.target.id)}\n        onMouseOver={e => e.target.style.backgroundColor = \"#C83737\"}\n        onMouseLeave={e => e.target.style.backgroundColor = \"\"}\n        key={uniqid()}>\n      </div>)\n  }\n\n  return(\n    <section className={!hasGameStarted ? \"computer-board\" : \"computer-board-start\"}>\n      <h1>Computer</h1>\n      <section className=\"board-grid --hover\">\n        {appendingTiles()}\n      </section>\n    </section>\n    )\n}\n","import React from \"react\";\nimport { Player } from \"../Player/Player\";\nimport { Computer } from \"../Computer/Computer\";\n\nexport const GameBoard = ({hasGameStarted, addPlayerShip, \n  handlePlayerAttack, playerBoard, computerBoard, \n  showShipPreview, hideShipPreview}) => {\n  return(\n    <section className=\"game-board\">\n      <Player \n        playerBoard={playerBoard}\n        addPlayerShip={addPlayerShip}\n        showShipPreview={showShipPreview}\n        hideShipPreview={hideShipPreview}\n        hasGameStarted={hasGameStarted}/>\n      {hasGameStarted === false\n        ? \"\"\n        : <Computer \n          computerBoard={computerBoard}\n          handlePlayerAttack={handlePlayerAttack}\n          hasGameStarted={hasGameStarted}/>}\n    </section>\n    )\n}\n","import React from \"react\"\n\nconst DefeatScreen = ({prop}) => {\n  return (\n    <section className={prop}>\n      <h1>YOU LOST!</h1>\n      <h3>Click anywhere to play again</h3>\n    </section>\n  )\n}\n\nconst WinScreen = ({prop}) => {\n  return (\n    <section className={prop}>\n      <h1>YOU WON!</h1>\n      <h3>Click anywhere to play again</h3>\n    </section>\n  )\n}\n\nexport const EndScreen = ({whoLost, resetGame}) => {\n  return(\n    <section onClick={resetGame}>\n      {whoLost === \"computer\"\n        ? <WinScreen prop={\"end --win\"}/>\n        : <DefeatScreen prop={\"end --defeat\"}/>}\n    </section>\n    )\n}\n","import React from \"react\"\n\nexport const Header = ({triggerGameStart, switchShipAxis,\nremoveLastShip, randomlyAddPlayerShips, verticalAxis, \n  hasGameStarted, resetGame}) => {\n  return(\n    <header>\n      <button onClick={hasGameStarted ? resetGame : triggerGameStart}>\n        {hasGameStarted ? \"Restart\" : \"Start Game\"}\n      </button>\n      {!hasGameStarted \n        ? <button className=\"switch-axis-btn\" onClick={switchShipAxis}>AXIS: {verticalAxis ? \"Y\" : \"X\"}</button>\n        : \"\"}\n      {!hasGameStarted \n        ?<button className=\"remove-ship-btn\" onClick={removeLastShip}>Remove ship</button>\n        : \"\"}\n      {!hasGameStarted \n        ?<button onClick={randomlyAddPlayerShips}>Random Ships</button>\n        : \"\"}\n    </header>\n    )\n}\n","import React from \"react\"\n\nexport const Footer = () => {\n  return(\n    <footer>\n      <h3>This Project is part of \n        <a href=\"https://www.theodinproject.com/\" target=\"_blank\">\n          The odin Project's\n        </a>\n      Full Stack Javascript Curriculum</h3>\n    </footer>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport { GameBoard } from \"./components/GameBoard/GameBoard\";\nimport { EndScreen } from \"./components/EndScreen/EndScreen\";\nimport { Header } from \"./components/Header/Header\";\nimport { Footer } from \"./components/Footer/Footer\";\nimport \"./App.scss\";\nconst playerBoardFactory = require('./utils/player_board_factory/player_board_factory');\nconst computerBoardFactory = require('./utils/computer_board_factory/computer_board_factory');\n\nconst shipNameMap = {\n  0: \"Carrier\",\n  1: \"Battleship\",\n  2: \"Cruiser\",\n  3: \"Submarine\",\n  4: \"Destroyer\"\n}\n\nconst shipLengthMap = {\n  0: 5,\n  1: 4,\n  2: 3,\n  3: 3,\n  4: 2\n}\n\nexport const App = () => {\n  const [ playerBoard, setPlayerBoard ] = useState(() => playerBoardFactory());\n  const [ computerBoard, setComputerBoard ] = useState(() => computerBoardFactory());\n  const [ turn, setTurn ] = useState(() => \"player\");\n  const [ hasGameStarted, setHasGameStarted ] = useState(() => false);\n  const [ verticalAxis, setVerticalAxis ] = useState(() => false);\n  const [ whoLost, setWhoLost ] = useState(() => \"\");\n  const [ shipCount, setShipCount ] = useState(() => 0);\n  const [ availableSpaces, setAvailableSpaces ] = useState(() => []);\n\n  useEffect(() => {\n    const didPlayerLose = playerBoard.checkingForDefeat();\n    if (didPlayerLose) \n      setTimeout(() => setWhoLost(\"player\"), 2000);\n  }, [playerBoard]);\n\n  useEffect(() => {\n    const didComputerLose = computerBoard.checkingForDefeat();\n    if (didComputerLose) \n      setTimeout(() => setWhoLost(\"computer\"), 2000);\n  }, [computerBoard]);\n\n  useEffect(() => {\n    if (hasGameStarted === true)\n      sortComputerShips();\n  }, [hasGameStarted])\n\n  useEffect(() => {\n    const didPlayerLose = \n      playerBoard.checkingForDefeat();\n    const didComputerLose = \n      computerBoard.checkingForDefeat();\n    if (turn === \"computer\" && !didComputerLose && !didPlayerLose) \n      setTimeout(handleComputerAttack, 1000);\n  }, [turn])\n\n  useEffect(() => {\n    const shipName =\n      shipNameMap[shipCount];\n    const newSpaces = \n      playerBoard.checkAvailableSpaces(shipName);\n    setAvailableSpaces(newSpaces);\n  }, [shipCount, verticalAxis]);\n\n  const triggerGameStart = () => {\n    if (shipCount >= 5 && !hasGameStarted)\n      setHasGameStarted(!hasGameStarted);\n  }\n\n  const resetGame = () => {\n    setHasGameStarted(false);\n    setPlayerBoard(() => playerBoardFactory());\n    setComputerBoard(() => computerBoardFactory());\n    setVerticalAxis(false);\n    setShipCount(0);\n    setWhoLost(\"\");\n    setTurn(\"player\");\n  }\n\n  const switchTurn = () => \n    turn === \"player\"\n      ? setTurn(\"computer\")\n      : setTurn(\"player\");\n\n  const switchShipAxis = () => {\n    setVerticalAxis(!verticalAxis);\n    let boardCopy = {...playerBoard};\n    boardCopy.changeShipDirection();\n    setPlayerBoard(boardCopy);\n  }\n\n  const isPositionViable = (index) => \n    availableSpaces.includes(index)\n\n  const addPlayerShip = index => {\n    if (hasGameStarted === true) return;\n    if (!isPositionViable(index)) return;\n    const boardCopy = {...playerBoard};\n    boardCopy.addShipToBoard(index , shipNameMap[shipCount]);\n    setPlayerBoard(boardCopy);\n    setShipCount(prevValue => prevValue+=1)\n  }\n\n  const randomlyAddPlayerShips = () => {\n    const boardCopy = {...playerBoard};\n    boardCopy.randomlyAddShips();\n    boardCopy.shipsOnBoard.Destroyer.axis === \"Y\"\n      ? setVerticalAxis(true)\n      : setVerticalAxis(false);\n    setPlayerBoard(boardCopy);\n    setShipCount(5);\n  }\n\n  const showShipPreview = (e) => {\n    if (shipCount >= 5) return;\n    const index = +e.target.id;\n    if (!isPositionViable(index)) {\n      e.target.style.backgroundColor = \"red\";\n      return;\n    }\n    const shipLength = shipLengthMap[shipCount]-1;\n    if (verticalAxis) \n      for (let i = index; i <= index+(shipLength*10); i+=10) \n        document.getElementById(`${i}`)\n          .style.backgroundColor = \"#00b4d8\";\n    else \n      for (let i = index; i <= index+shipLength; i++) \n        document.getElementById(`${i}`)\n          .style.backgroundColor = \"#00b4d8\";\n  }\n\n  const hideShipPreview = (e) => {\n    if (shipCount >= 5) return;\n    const index = +e.target.id;\n    if (!isPositionViable(index)) {\n      if (playerBoard.board[index].length <= 4)\n        e.target.style.backgroundColor = \"rgb(30, 30, 30)\";\n      else\n        e.target.style.backgroundColor = \"#3E78B2\";\n      return;\n    }\n    const shipLength = shipLengthMap[shipCount]-1;\n    if (verticalAxis) \n      for (let i = index; i <= index+(shipLength*10); i+=10) \n        document.getElementById(`${i}`)\n          .style.backgroundColor = \"rgb(30, 30, 30)\";\n    else \n      for (let i = index; i <= index+shipLength; i++) \n        document.getElementById(`${i}`)\n          .style.backgroundColor = \"rgb(30, 30, 30)\";\n  }\n\n  const removeLastShip = () => {\n    if (shipCount <= 0) return;\n    const boardCopy = {...playerBoard};\n    const shipToRemove = shipNameMap[shipCount-1];\n    boardCopy.removeShipFromBoard(shipToRemove);\n    setPlayerBoard(boardCopy);\n    setShipCount(prevValue => prevValue-1);\n  }\n\n  const sortComputerShips = () => {\n    const boardCopy = {...computerBoard};\n    boardCopy.randomlyAddShips();\n    setComputerBoard(boardCopy);\n  }\n\n  const handlePlayerAttack = index => {\n    if (turn === \"computer\") return;\n    const didPlayerLose = \n      playerBoard.checkingForDefeat();\n    if (didPlayerLose) return;\n    let boardCopy = {...computerBoard};\n    const { board } = boardCopy;\n    if (board[index].includes(\"miss\") \n      || board[index].includes(\"sunk\") \n      || board[index].includes(\"destroyed\")\n      || board[index].includes(\"hit\"))\n      return;\n    switchTurn();\n    boardCopy.recieveAttack(index);\n    setComputerBoard(boardCopy);\n  }\n\n  const handleComputerAttack = () => {\n    switchTurn();\n    let boardCopy = {...playerBoard};\n    boardCopy.computerAttack();\n    setPlayerBoard(boardCopy);\n  }\n\n  return (\n    <section className=\"App\">\n      {whoLost === \"\"\n        ?<Header \n          triggerGameStart={triggerGameStart}\n          resetGame={resetGame}\n          switchShipAxis={switchShipAxis}\n          verticalAxis={verticalAxis}\n          removeLastShip={removeLastShip}\n          randomlyAddPlayerShips={randomlyAddPlayerShips}\n          hasGameStarted={hasGameStarted}/>\n        : \"\"\n      }\n      {whoLost === \"\"\n        ? <GameBoard \n            hasGameStarted={hasGameStarted}\n            addPlayerShip={addPlayerShip}\n            handlePlayerAttack={handlePlayerAttack}\n            playerBoard={playerBoard}\n            computerBoard={computerBoard}\n            showShipPreview={showShipPreview}\n            hideShipPreview={hideShipPreview}\n          />\n        : <EndScreen \n            whoLost={whoLost}\n            resetGame={resetGame}/>\n      }\n      {whoLost === \"\"\n        ?<Footer />\n        : \"\"}\n    </section>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","const LENGTH_MAPPING = {\n  'Carrier': 5,\n  'Battleship': 4,\n  'Cruiser': 3,\n  'Submarine': 3,\n  'Destroyer': 2\n}\n\nconst shipFactory = (shipName, axis, index) => {\n  const length = LENGTH_MAPPING[shipName]\n  let hits = 0;\n  let isSunk = false;\n  const setSunk = () => {\n    if (obj.hits >= length) obj.isSunk = true;\n  };\n  const addHit = () => {\n    obj.hits++;\n    setSunk();\n  };\n  const obj = { shipName, length, index, hits, axis, isSunk, addHit };\n  return obj;\n};\n\nmodule.exports = shipFactory;\n"],"sourceRoot":""}